(function(exports, node) {
  var saved_instance;

  /**
   * Connect to the server and initialize the jiff instance
   */
  exports.connect = function (hostname, computation_id, options) {
    var opt = Object.assign({}, options);

    if(node)
      jiff = require('{{{JIFF_PATH}}}/lib/jiff-client');

    saved_instance = jiff.make_jiff(hostname, computation_id, opt);
    return saved_instance;
  };


 const project = function(inRel, keepRows, projCols)
  {

    var ret = [];
    var keepRowsResult = [];

    for (var i = 0; i < inRel.length; i++)
    {
      ret.push([]);
      keepRowsResult.push(keepRows[i]);
      for (var j = 0; j < projCols.length; j++)
      {
        ret[i].push(inRel[i][projCols[j]]);
      }
    }
    return [ret, keepRowsResult];
  };

  const join = function(leftRel, rightRel, leftJoinColIdx, rightJoinColIdx)
  {

    var result = []

    for (var i = 0; i < leftRel.length; i++)
    {
      var leftJoinCol = leftRel[i][leftJoinColIdx];
      for (var j = 0; j < rightRel.length; j++)
      {
        var rightJoinCol = rightRel[j][rightJoinColIdx];
        if (leftJoinCol.eq(rightJoinCol))
        {
          var newLeft = leftRel[i].slice();
          var newRight = rightRel[j].slice();
          var jOne = newLeft.splice(leftJoinColIdx, 1);
          var jTwo = newRight.splice(rightJoinColIdx, 1);
          var newRow = [leftJoinCol].concat(newLeft).concat(newRight);
          result.push(newRow);
        }
      }
    }

    return result;
  }

  const multiply = function(inRel, newCol, targetCol, operands, scalar)
  {
    var result = [];

    for (var i = 0; i < inRel.length; i++)
    {
      var targetVal = inRel[i][targetCol].cmult(scalar);
      for (var j = 0; j < operands.length; j++)
      {
        targetVal = targetVal.smult(inRel[i][operands[j]]);
      }
      if (newCol)
      {
        var newRow = inRel[i].concat([targetVal]);
        result.push(newRow);
      }
      else
      {
        inRel[i][targetCol] = targetVal;
        result.push(inRel[i]);
      }
    }

    return result;

  }

  const divide = function(inRel, newCol, targetCol, operands, scalar)
  {
    var result = [];

    for (var i = 0; i < inRel.length; i++)
    {
      var targetVal = inRel[i][targetCol].cdiv(scalar);
      for (var j = 0; j < operands.length; j++)
      {
        targetVal = targetVal.sdiv(inRel[i][operands[j]]);
      }
      if (newCol)
      {
        var newRow = inRel[i].concat([targetVal]);
        result.push(newRow);
      }
      else
      {
        inRel[i][targetCol] = targetVal;
        result.push(inRel[i]);
      }
    }

    return result;
  }

  const concatenate = function(inRels, keepRows)
  {
    var ret = [];
    var keepRowsResult = [];

    for (var i = 0; i < inRels.length; i++)
    {
      for (var j = 0; j < inRels[i].length; j++)
      {
        ret.push(inRels[i][j]);
        keepRowsResult.push(keepRows[i][j]);
      }
    }

    return [ret, keepRowsResult];
  };

  const open = function(inRel, keepRows)
  {
    var results = saved_instance.open_2D_array(inRel);
    var keepRowsResults = saved_instance.open_array(keepRows);

    return Promise.all([results, keepRowsResults]).then(function(arr){
      var openedRes = arr[0];
      var openedKeep = arr[1];
      var ret = [];

      for (var i = 0; i < openedRes.length; i++)
      {
        if (openedKeep[i] === 1)
        {
          ret.push(openedRes[i])
        }
      }

      return ret;
    });
  };

  /**
   * The MPC computation
   */
  exports.compute = function (input, jiff_instance) {
    if(jiff_instance == null) jiff_instance = saved_instance;

    var fs = require('fs');

    // NOTE: assuming 1 file per party here

    var inputData = [];
    var keepRows = [];
    var unparsedData = (fs.readFileSync(input, 'UTF-8')).trim();
    var rows = unparsedData.split('\n');

    // start at one, skip header row
    for (let i = 1; i < rows.length; i++)
    {
      let arr = rows[i].split(',').map(Number);
      inputData.push(arr);
      keepRows.push(1);
    }

    var dataShares = jiff_instance.share_2D_array(inputData);
    var keepRowShares = jiff_instance.share_array(keepRows);

    var computation = Promise.all([dataShares, keepRowShares]).then(function(arr) {
        {{{OP_CODE}}}
    });

    return computation.then(function(opened) {
        return opened;
    });
  };
}((typeof exports == 'undefined' ? this.mpc = {} : exports), typeof exports != 'undefined'));
