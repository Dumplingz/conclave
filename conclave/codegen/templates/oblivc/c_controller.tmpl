#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <obliv.h>
#include <obliv.oh>

#include "workflow.h"

void loadData(Io *io);
void displayData(protocolIo *io);
void writeData(protocolIo *io);
int countRows(Io *io);
void loadMockData(Io *io);


int main(int argc, char **argv)
{
	const char *remote_host = strtok(argv[1], ":");
 	const char *port = strtok(NULL, ":");
  	ProtocolDesc pd;
	protocolIo io;

	io.out = "{{{OUTPUT_PATH}}}";

{{{STRUCT_CODE}}}
	printf("Connecting to %s on port %s ...\n", remote_host, port);
    if("{{{PID}}}" == "1")
    {
      if(protocolAcceptTcp2P(&pd,port)!=0)
      {
        exit(1);
      }
    }
    else
    {
      if(protocolConnectTcp2P(&pd,remote_host,port)!=0)
      {
        exit(1);
      }
    }

	setCurrentParty(&pd,{{{PID}}});

  	execYaoProtocol(&pd,protocol,&io);
  	cleanupProtocol(&pd);

    {{{WRITE_CODE}}}

  	return 0;

}

void writeData(protocolIo *io)
{
	FILE *fp;
	fp = fopen(io->out, "w+");

	for (int i = 0; i < io->outRows; i++)
	{
		for (int j = 0; j < io->outCols - 1; j++)
		{
			fprintf(fp, "%g,", io->ret[i][j]);
		}
		fprintf(fp, "%g\n", io->ret[i][io->outCols - 1]);
	}
	fclose(fp);
}

void displayData(protocolIo *io)
{
    for (int i = 0; i < io->outRows; i++)
    {
        for (int j = 0; j < io->outCols; j++)
        {
            printf("|  %i|%i : %g  |", i, j, io->ret[i][j]);
        }
        printf("\n");
    }
}

int countRows(Io *io)
{
	char buffer[1024];
  	char *record, *line;

	FILE *fstream = fopen(io->src, "r");

	if (fstream == NULL)
	{
	      printf("\n file opening failed ");
	}

	// skip header
    fgets(buffer, sizeof(buffer), fstream);

	int numRecords = 0;
	while((line=fgets(buffer,sizeof(buffer),fstream))!=NULL)
	{
		record = strtok(line, ",");
		while(record != NULL)
		{
			numRecords++;
			record = strtok(NULL,",");
		}
	}

	int numRows = numRecords / io->cols;

	return numRows;
}

void loadMockData(Io *io)
{
	float **array = malloc(sizeof(*array) * io->rows);
	for (int i = 0; i < 5; i++)
	{
		array[i] = malloc(sizeof(**array) * 4);
		for (int j = 0; j < 5; j++)
		{
			array[i][j] = 0.0;
		}
	}

	io->mat = array;
}

void loadData(Io *io)
{

	int i = 0;
  	char buffer[1024];
  	char *record, *line;

	FILE *fstream = fopen(io->src, "r");

	float **array = malloc(sizeof(*array) * io->rows);

	if (fstream == NULL)
	{
	      printf("\n file opening failed ");
	}

	// skip header
	fgets(buffer, sizeof(buffer), fstream);

	while((line=fgets(buffer,sizeof(buffer),fstream))!=NULL)
	{
		array[i] = malloc(sizeof(**array) * io->cols);
		record = strtok(line, ",");

		int j = 0;
		while(record != NULL)
		{
			array[i][j] = atof(record);
			record = strtok(NULL,",");
			j++;
		}
		i++;
	}

	io->mat = array;

	fclose(fstream);
}
