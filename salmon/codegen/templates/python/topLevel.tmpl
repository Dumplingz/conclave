import sys
import re

def write_rel(job_dir, rel_name, rel, schema_header):

    print("Will write to {}/{}".format(job_dir, rel_name))
    path = "{}/{}".format(job_dir, rel_name)
    with open(path, "w") as f:
        # hack header
        f.write(schema_header + "\n")
        for row in rel:
            f.write(",".join([str(val) for val in row]) + "\n")

def read_rel(path_to_rel):

    rows = []
    with open(path_to_rel, "r") as f:
        it = iter(f.readlines())
        for raw_row in it:
            # TODO: only need to do this for first row
            try:
                split_row = [int(val) for val in raw_row.split(",")]
                rows.append([int(val) for val in split_row])
            except ValueError:
                print("skipped header")
    return rows

def project(rel, selected_cols):

    return [[row[idx] for idx in selected_cols] for row in rel]

def project_indeces(rel):

    return [[idx] + rest for (idx, rest) in enumerate(rel)]

def join(left, right, left_col, right_col):
    
    joined = []
    for left_row in left:
        for right_row in right:
            if left_row[left_col] == right_row[right_col]:
                vals_from_left = [val for (idx, val) in enumerate(left_row) if idx != left_col]
                vals_from_right = [val for (idx, val) in enumerate(right_row) if idx != right_col]
                joined_row = [left_row[left_col]] + vals_from_left + vals_from_right
                joined.append(joined_row)
    return joined

def index_agg(rel, over_col, distinct_keys, indeces, aggregator):

    empty = 0
    res = [[key[0], empty] for key in distinct_keys]
    print("rel", rel)
    print("res", res)
    print("indeces", indeces)
    for row_idx, key_idx in indeces:
        res[key_idx][1] = aggregator(res[key_idx][1], rel[row_idx][over_col])
    return res

def distinct(rel, selected_cols):

    # TODO: general case
    assert len(selected_cols) == 1
    only_selected = project(rel, selected_cols)
    unwrapped = [row[0] for row in only_selected]
    return [[key] for key in set(unwrapped)]

if __name__ == "__main__":
    print("start python")
{{{OP_CODE}}}
    print("done python")
