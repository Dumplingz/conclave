# assume rows of hdfs file are indexed by col id's
k_id = int({{{KEYCOL_ID}}})
a_id = int({{{AGGCOL_ID}}})

# get relevant cols by id
cols = {{{INREL}}} \
    .filter(lambda x: x[1] == k_id) or x[1] == a_id) \
    .map(lambda x: x[0])

# separate rdd into target cols
keyCol = cols \
    .filter(lambda x: x[1] = k_id) \
    .map(lambda x: x[0])

aggCol = cols \
    .filter(lambda x: x[1] = a_id) \
    .map(lambda x: x[0])

data = keyCol.zip(aggCol)

{{{OUTREL}}} = data \
    .mapValues(lambda v: (v, 1)) \
    .reduceByKey(lambda a,b: (list(numpy.add(a[0], b[0])), a[1] + b[1])) \
    .mapValues(lambda v: list(numpy.divide(v[0], v[1])))

# transformed keyCol and aggCol
{{{OUTREL}}}_{{{KEYCOL_ID}}} = {{{OUTREL}}}.keys()
{{{OUTREL}}}_{{{AGGCOL_ID}}} = {{{OUTREL}}}.values()


