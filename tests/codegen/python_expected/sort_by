import sys
import re

def write_rel(job_dir, rel_name, rel, schema_header):

    print("Will write to {}/{}".format(job_dir, rel_name))
    path = "{}/{}".format(job_dir, rel_name)
    with open(path, "w") as f:
        # hack header
        f.write(schema_header + "\n")
        for row in rel:
            f.write(",".join([str(val) for val in row]) + "\n")

def read_rel(path_to_rel):

    rows = []
    with open(path_to_rel, "r") as f:
        it = iter(f.readlines())
        for raw_row in it:
            # TODO: only need to do this for first row
            try:
                split_row = [int(val) for val in raw_row.split(",")]
                rows.append([int(val) for val in split_row])
            except ValueError:
                print("skipped header")
    return rows

def project(rel, selected_cols):

    return [[row[idx] for idx in selected_cols] for row in rel]

# TODO handle multi-column case and aggregators other than sum
def aggregate(rel, group_by_idx, over_idx, aggregator):

    acc = {}
    for row in rel:
        key = row[group_by_idx]
        if key not in acc:
            acc[key] = 0
        acc[key] += row[over_idx]
    return [[key, value] for key, value in acc.items()]

def arithmetic_project(rel, target_col_idx, f):

    return [[value if idx != target_col_idx else f(row) for idx, value in enumerate(row)] for row in rel]

def project_indeces(rel):

    return [[idx] + rest for (idx, rest) in enumerate(rel)]

def join_flags(left, right, left_col, right_col):

    return [[int(left_row[left_col] == right_row[right_col])] for left_row in left for right_row in right]

def join(left, right, left_col, right_col):

    left_row_map = dict()
    for left_row in left:
        key = left_row[left_col]
        if key not in left_row_map:
            left_row_map[key] = []        
        left_row_map[key].append(left_row)

    joined = []
    for right_row in right:
        right_key = right_row[right_col]
        if right_key in left_row_map:
            left_rows = left_row_map[right_key]
            for left_row in left_rows:
                vals_from_left = [val for (idx, val) in enumerate(left_row) if idx != left_col]
                vals_from_right = [val for (idx, val) in enumerate(right_row) if idx != right_col]
                joined_row = [right_key] + vals_from_left + vals_from_right
                joined.append(joined_row)

    return joined

def index_agg(rel, over_col, distinct_keys, indeces, aggregator):

    empty = 0
    res = [[key[0], empty] for key in distinct_keys]
    print("rel", rel)
    print("res", res)
    print("indeces", indeces)
    for row_idx, key_idx in indeces:
        res[key_idx][1] = aggregator(res[key_idx][1], rel[row_idx][over_col])
    return res

def sort_by(rel, sort_by_col):

    return sorted(rel, key=lambda row: row[sort_by_col])

def comp_neighs(rel, comp_col):

    left = [row[comp_col] for row in rel[0:-1]]
    right = [row[comp_col] for row in rel[1:]]
    return [[int(l == r)] for l, r in zip(left, right)]

def distinct(rel, selected_cols):

    # TODO: general case
    assert len(selected_cols) == 1
    only_selected = project(rel, selected_cols)
    unwrapped = [row[0] for row in only_selected]
    return [[key] for key in set(unwrapped)]

if __name__ == "__main__":
    print("start python")
    in_1 = read_rel('/tmp/in_1.csv')
    sort_by = sort_by(in_1, 0)
    write_rel('/tmp', 'sort_by.csv', sort_by, '"a","b","c","d"')

    print("done python")
