{'user_config': {'pid': 1, 'leaky_ops': 0, 'use_floats': 0, 'workflow_name': 'example', 'all_pids': [1, 2], 'paths': {'input_path': '/home/cc/conclave/demo/tpch_one/1GB'}}, 'net': {'parties': [{'port': 9001, 'host': '0.0.0.0'}, {'port': 9002, 'host': '0.0.0.0'}]}, 'backends': {'oblivc': {'ip_port': 'localhost:1234', 'available': 1, 'party_count': '2', 'oc_path': '/home/cc/obliv-c/bin/oblivcc'}}}
MPCPushDown rewriting lineitem0
MPCPushDown rewriting lineitem1
MPCPushDown rewriting lineitem
MPCPushDown rewriting by_quantity
MPCPushDown rewriting sorted
UpdateColumns rewriting lineitem0
UpdateColumns rewriting by_quantity_0
UpdateColumns rewriting lineitem1
UpdateColumns rewriting by_quantity_1
UpdateColumns rewriting lineitem
UpdateColumns rewriting by_quantity_obl
UpdateColumns rewriting sorted
MPCPushUp rewriting sorted
MPCPushUp rewriting by_quantity_obl
MPCPushUp rewriting lineitem
MPCPushUp rewriting by_quantity_1
MPCPushUp rewriting lineitem1
MPCPushUp rewriting by_quantity_0
MPCPushUp rewriting lineitem0
TrustSetPropDown rewriting lineitem0
TrustSetPropDown rewriting by_quantity_0
TrustSetPropDown rewriting lineitem1
TrustSetPropDown rewriting by_quantity_1
TrustSetPropDown rewriting lineitem
TrustSetPropDown rewriting by_quantity_obl
TrustSetPropDown rewriting sorted
HybridOperatorOpt rewriting lineitem0
HybridOperatorOpt rewriting by_quantity_0
HybridOperatorOpt rewriting lineitem1
HybridOperatorOpt rewriting by_quantity_1
HybridOperatorOpt rewriting lineitem
HybridOperatorOpt rewriting by_quantity_obl
HybridOperatorOpt rewriting sorted
InsertOpenAndCloseOps rewriting lineitem0
InsertOpenAndCloseOps rewriting by_quantity_0
False
{<conclave.dag.Concat object at 0x7f9416f57190>}
InsertOpenAndCloseOps rewriting lineitem1
InsertOpenAndCloseOps rewriting by_quantity_1
False
{<conclave.dag.Concat object at 0x7f9416f57190>}
InsertOpenAndCloseOps rewriting lineitem
InsertOpenAndCloseOps rewriting by_quantity_obl
True
{<conclave.dag.SortBy object at 0x7f9416f57450>}
InsertOpenAndCloseOps rewriting sorted
True
set()
ExpandCompositeOps rewriting lineitem0
ExpandCompositeOps rewriting by_quantity_0
ExpandCompositeOps rewriting by_quantity_0_close
ExpandCompositeOps rewriting lineitem1
ExpandCompositeOps rewriting by_quantity_1
ExpandCompositeOps rewriting by_quantity_1_close
ExpandCompositeOps rewriting lineitem
ExpandCompositeOps rewriting by_quantity_obl
ExpandCompositeOps rewriting sorted
ExpandCompositeOps rewriting sorted_open
StoredWithSimplifier rewriting lineitem0
StoredWithSimplifier rewriting by_quantity_0
StoredWithSimplifier rewriting by_quantity_0_close
StoredWithSimplifier rewriting lineitem1
StoredWithSimplifier rewriting by_quantity_1
StoredWithSimplifier rewriting by_quantity_1_close
StoredWithSimplifier rewriting lineitem
StoredWithSimplifier rewriting by_quantity_obl
StoredWithSimplifier rewriting sorted
StoredWithSimplifier rewriting sorted_open
EliminateSorts rewriting lineitem0
EliminateSorts rewriting by_quantity_0
EliminateSorts rewriting by_quantity_0_close
EliminateSorts rewriting lineitem1
EliminateSorts rewriting by_quantity_1
EliminateSorts rewriting by_quantity_1_close
EliminateSorts rewriting lineitem
EliminateSorts rewriting by_quantity_obl
EliminateSorts rewriting sorted
EliminateSorts rewriting sorted_open
##################
CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}

##################
python {1} CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}

python {2} CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}

obliv-c {1, 2} CREATE RELATION by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}
MPCPushDown rewriting lineitem0
MPCPushDown rewriting lineitem1
MPCPushDown rewriting lineitem
MPCPushDown rewriting by_quantity
MPCPushDown rewriting sorted
UpdateColumns rewriting lineitem0
UpdateColumns rewriting by_quantity_0
UpdateColumns rewriting lineitem1
UpdateColumns rewriting by_quantity_1
UpdateColumns rewriting lineitem
UpdateColumns rewriting by_quantity_obl
UpdateColumns rewriting sorted
MPCPushUp rewriting sorted
MPCPushUp rewriting by_quantity_obl
MPCPushUp rewriting lineitem
MPCPushUp rewriting by_quantity_1
MPCPushUp rewriting lineitem1
MPCPushUp rewriting by_quantity_0
MPCPushUp rewriting lineitem0
TrustSetPropDown rewriting lineitem0
TrustSetPropDown rewriting by_quantity_0
TrustSetPropDown rewriting lineitem1
TrustSetPropDown rewriting by_quantity_1
TrustSetPropDown rewriting lineitem
TrustSetPropDown rewriting by_quantity_obl
TrustSetPropDown rewriting sorted
HybridOperatorOpt rewriting lineitem0
HybridOperatorOpt rewriting by_quantity_0
HybridOperatorOpt rewriting lineitem1
HybridOperatorOpt rewriting by_quantity_1
HybridOperatorOpt rewriting lineitem
HybridOperatorOpt rewriting by_quantity_obl
HybridOperatorOpt rewriting sorted
InsertOpenAndCloseOps rewriting lineitem0
InsertOpenAndCloseOps rewriting by_quantity_0
False
{<conclave.dag.Concat object at 0x7f9416f58210>}
InsertOpenAndCloseOps rewriting lineitem1
InsertOpenAndCloseOps rewriting by_quantity_1
False
{<conclave.dag.Concat object at 0x7f9416f58210>}
InsertOpenAndCloseOps rewriting lineitem
InsertOpenAndCloseOps rewriting by_quantity_obl
True
{<conclave.dag.SortBy object at 0x7f9416f584d0>}
InsertOpenAndCloseOps rewriting sorted
True
set()
ExpandCompositeOps rewriting lineitem0
ExpandCompositeOps rewriting by_quantity_0
ExpandCompositeOps rewriting by_quantity_0_close
ExpandCompositeOps rewriting lineitem1
ExpandCompositeOps rewriting by_quantity_1
ExpandCompositeOps rewriting by_quantity_1_close
ExpandCompositeOps rewriting lineitem
ExpandCompositeOps rewriting by_quantity_obl
ExpandCompositeOps rewriting sorted
ExpandCompositeOps rewriting sorted_open
StoredWithSimplifier rewriting lineitem0
StoredWithSimplifier rewriting by_quantity_0
StoredWithSimplifier rewriting by_quantity_0_close
StoredWithSimplifier rewriting lineitem1
StoredWithSimplifier rewriting by_quantity_1
StoredWithSimplifier rewriting by_quantity_1_close
StoredWithSimplifier rewriting lineitem
StoredWithSimplifier rewriting by_quantity_obl
StoredWithSimplifier rewriting sorted
StoredWithSimplifier rewriting sorted_open
EliminateSorts rewriting lineitem0
EliminateSorts rewriting by_quantity_0
EliminateSorts rewriting by_quantity_0_close
EliminateSorts rewriting lineitem1
EliminateSorts rewriting by_quantity_1
EliminateSorts rewriting by_quantity_1_close
EliminateSorts rewriting lineitem
EliminateSorts rewriting by_quantity_obl
EliminateSorts rewriting sorted
EliminateSorts rewriting sorted_open
##################
CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}

##################
python {1} CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}

python {2} CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}

obliv-c {1, 2} CREATE RELATION by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}
start python
Will write to /home/cc/conclave/demo/tpch_one/1GB/by_quantity_0.csv
done python
start python
Will write to /home/cc/conclave/demo/tpch_two/1GB/by_quantity_1.csv
done python
Connecting to localhost on port 1234 ...
Connecting to localhost on port 1234 ...

0 python
1 python
2 obliv-c
Will connect to 1 at 0.0.0.0:9001
Missing Jiff config 

Skipping other party's job:  <conclave.job.PythonJob object at 0x7f9416f65350>
example-python-job-1: /home/cc/conclave/demo/tpch_two/1GB/example-python-job-1/workflow.py running
Dispatching as Evaluator.

done msg received DoneMsg(1)
Obliv-C DoneMsg received.

***

Writing header file here /home/cc/conclave/demo/tpch_two/1GB/example-oblivc-job-2

***
example-oblivc-job-2: /home/cc/conclave/demo/tpch_two/1GB/example-oblivc-job-2/bash.sh dispatching Obliv-C job. 

0 python
1 python
2 obliv-c
Will wait for 2 to connect
iam msg received IAMMsg(2)
Missing Jiff config 

example-python-job-0: /home/cc/conclave/demo/tpch_one/1GB/example-python-job-0/workflow.py running
Skipping other party's job:  <conclave.job.PythonJob object at 0x7f9416f57310>
Dispatching as Garbler.

***

Writing header file here /home/cc/conclave/demo/tpch_one/1GB/example-oblivc-job-2

***
example-oblivc-job-2: /home/cc/conclave/demo/tpch_one/1GB/example-oblivc-job-2/bash.sh dispatching Obliv-C job. 
took 62.10807745996863 seconds to run MPC
{'user_config': {'pid': 1, 'leaky_ops': 0, 'use_floats': 0, 'workflow_name': 'example', 'all_pids': [1, 2], 'paths': {'input_path': '/home/cc/conclave/demo/tpch_one/1GB'}}, 'net': {'parties': [{'port': 9001, 'host': '0.0.0.0'}, {'port': 9002, 'host': '0.0.0.0'}]}, 'backends': {'oblivc': {'ip_port': 'localhost:1234', 'available': 1, 'party_count': '2', 'oc_path': '/home/cc/obliv-c/bin/oblivcc'}}}
MPCPushDown rewriting lineitem0
MPCPushDown rewriting lineitem1
MPCPushDown rewriting lineitem
MPCPushDown rewriting by_quantity
MPCPushDown rewriting sorted
UpdateColumns rewriting lineitem0
UpdateColumns rewriting by_quantity_0
UpdateColumns rewriting lineitem1
UpdateColumns rewriting by_quantity_1
UpdateColumns rewriting lineitem
UpdateColumns rewriting by_quantity_obl
UpdateColumns rewriting sorted
MPCPushUp rewriting sorted
MPCPushUp rewriting by_quantity_obl
MPCPushUp rewriting lineitem
MPCPushUp rewriting by_quantity_1
MPCPushUp rewriting lineitem1
MPCPushUp rewriting by_quantity_0
MPCPushUp rewriting lineitem0
TrustSetPropDown rewriting lineitem0
TrustSetPropDown rewriting by_quantity_0
TrustSetPropDown rewriting lineitem1
TrustSetPropDown rewriting by_quantity_1
TrustSetPropDown rewriting lineitem
TrustSetPropDown rewriting by_quantity_obl
TrustSetPropDown rewriting sorted
HybridOperatorOpt rewriting lineitem0
HybridOperatorOpt rewriting by_quantity_0
HybridOperatorOpt rewriting lineitem1
HybridOperatorOpt rewriting by_quantity_1
HybridOperatorOpt rewriting lineitem
HybridOperatorOpt rewriting by_quantity_obl
HybridOperatorOpt rewriting sorted
InsertOpenAndCloseOps rewriting lineitem0
InsertOpenAndCloseOps rewriting by_quantity_0
False
{<conclave.dag.Concat object at 0x7f9416f249d0>}
InsertOpenAndCloseOps rewriting lineitem1
InsertOpenAndCloseOps rewriting by_quantity_1
False
{<conclave.dag.Concat object at 0x7f9416f249d0>}
InsertOpenAndCloseOps rewriting lineitem
InsertOpenAndCloseOps rewriting by_quantity_obl
True
{<conclave.dag.SortBy object at 0x7f9416f24bd0>}
InsertOpenAndCloseOps rewriting sorted
True
set()
ExpandCompositeOps rewriting lineitem0
ExpandCompositeOps rewriting by_quantity_0
ExpandCompositeOps rewriting by_quantity_0_close
ExpandCompositeOps rewriting lineitem1
ExpandCompositeOps rewriting by_quantity_1
ExpandCompositeOps rewriting by_quantity_1_close
ExpandCompositeOps rewriting lineitem
ExpandCompositeOps rewriting by_quantity_obl
ExpandCompositeOps rewriting sorted
ExpandCompositeOps rewriting sorted_open
StoredWithSimplifier rewriting lineitem0
StoredWithSimplifier rewriting by_quantity_0
StoredWithSimplifier rewriting by_quantity_0_close
StoredWithSimplifier rewriting lineitem1
StoredWithSimplifier rewriting by_quantity_1
StoredWithSimplifier rewriting by_quantity_1_close
StoredWithSimplifier rewriting lineitem
StoredWithSimplifier rewriting by_quantity_obl
StoredWithSimplifier rewriting sorted
StoredWithSimplifier rewriting sorted_open
EliminateSorts rewriting lineitem0
EliminateSorts rewriting by_quantity_0
EliminateSorts rewriting by_quantity_0_close
EliminateSorts rewriting lineitem1
EliminateSorts rewriting by_quantity_1
EliminateSorts rewriting by_quantity_1_close
EliminateSorts rewriting lineitem
EliminateSorts rewriting by_quantity_obl
EliminateSorts rewriting sorted
EliminateSorts rewriting sorted_open
##################
CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}

##################
python {1} CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}

python {2} CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}

obliv-c {1, 2} CREATE RELATION by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}
MPCPushDown rewriting lineitem0
MPCPushDown rewriting lineitem1
MPCPushDown rewriting lineitem
MPCPushDown rewriting by_quantity
MPCPushDown rewriting sorted
UpdateColumns rewriting lineitem0
UpdateColumns rewriting by_quantity_0
UpdateColumns rewriting lineitem1
UpdateColumns rewriting by_quantity_1
UpdateColumns rewriting lineitem
UpdateColumns rewriting by_quantity_obl
UpdateColumns rewriting sorted
MPCPushUp rewriting sorted
MPCPushUp rewriting by_quantity_obl
MPCPushUp rewriting lineitem
MPCPushUp rewriting by_quantity_1
MPCPushUp rewriting lineitem1
MPCPushUp rewriting by_quantity_0
MPCPushUp rewriting lineitem0
TrustSetPropDown rewriting lineitem0
TrustSetPropDown rewriting by_quantity_0
TrustSetPropDown rewriting lineitem1
TrustSetPropDown rewriting by_quantity_1
TrustSetPropDown rewriting lineitem
TrustSetPropDown rewriting by_quantity_obl
TrustSetPropDown rewriting sorted
HybridOperatorOpt rewriting lineitem0
HybridOperatorOpt rewriting by_quantity_0
HybridOperatorOpt rewriting lineitem1
HybridOperatorOpt rewriting by_quantity_1
HybridOperatorOpt rewriting lineitem
HybridOperatorOpt rewriting by_quantity_obl
HybridOperatorOpt rewriting sorted
InsertOpenAndCloseOps rewriting lineitem0
InsertOpenAndCloseOps rewriting by_quantity_0
False
{<conclave.dag.Concat object at 0x7f9416f23e50>}
InsertOpenAndCloseOps rewriting lineitem1
InsertOpenAndCloseOps rewriting by_quantity_1
False
{<conclave.dag.Concat object at 0x7f9416f23e50>}
InsertOpenAndCloseOps rewriting lineitem
InsertOpenAndCloseOps rewriting by_quantity_obl
True
{<conclave.dag.SortBy object at 0x7f9416f29090>}
InsertOpenAndCloseOps rewriting sorted
True
set()
ExpandCompositeOps rewriting lineitem0
ExpandCompositeOps rewriting by_quantity_0
ExpandCompositeOps rewriting by_quantity_0_close
ExpandCompositeOps rewriting lineitem1
ExpandCompositeOps rewriting by_quantity_1
ExpandCompositeOps rewriting by_quantity_1_close
ExpandCompositeOps rewriting lineitem
ExpandCompositeOps rewriting by_quantity_obl
ExpandCompositeOps rewriting sorted
ExpandCompositeOps rewriting sorted_open
StoredWithSimplifier rewriting lineitem0
StoredWithSimplifier rewriting by_quantity_0
StoredWithSimplifier rewriting by_quantity_0_close
StoredWithSimplifier rewriting lineitem1
StoredWithSimplifier rewriting by_quantity_1
StoredWithSimplifier rewriting by_quantity_1_close
StoredWithSimplifier rewriting lineitem
StoredWithSimplifier rewriting by_quantity_obl
StoredWithSimplifier rewriting sorted
StoredWithSimplifier rewriting sorted_open
EliminateSorts rewriting lineitem0
EliminateSorts rewriting by_quantity_0
EliminateSorts rewriting by_quantity_0_close
EliminateSorts rewriting lineitem1
EliminateSorts rewriting by_quantity_1
EliminateSorts rewriting by_quantity_1_close
EliminateSorts rewriting lineitem
EliminateSorts rewriting by_quantity_obl
EliminateSorts rewriting sorted
EliminateSorts rewriting sorted_open
##################
CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}

##################
python {1} CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}

python {2} CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}

obliv-c {1, 2} CREATE RELATION by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}
start python
Will write to /home/cc/conclave/demo/tpch_one/1GB/by_quantity_0.csv
done python
start python
Will write to /home/cc/conclave/demo/tpch_two/1GB/by_quantity_1.csv
done python
Connecting to localhost on port 1234 ...
Connecting to localhost on port 1234 ...

0 python
1 python
2 obliv-c
Will connect to 1 at 0.0.0.0:9001
Missing Jiff config 

Skipping other party's job:  <conclave.job.PythonJob object at 0x7f9416f23f50>
example-python-job-1: /home/cc/conclave/demo/tpch_two/1GB/example-python-job-1/workflow.py running
Dispatching as Evaluator.

done msg received DoneMsg(1)
Obliv-C DoneMsg received.

***

Writing header file here /home/cc/conclave/demo/tpch_two/1GB/example-oblivc-job-2

***
example-oblivc-job-2: /home/cc/conclave/demo/tpch_two/1GB/example-oblivc-job-2/bash.sh dispatching Obliv-C job. 

0 python
1 python
2 obliv-c
Will wait for 2 to connect
iam msg received IAMMsg(2)
Missing Jiff config 

example-python-job-0: /home/cc/conclave/demo/tpch_one/1GB/example-python-job-0/workflow.py running
Skipping other party's job:  <conclave.job.PythonJob object at 0x7f9416f24b10>
Dispatching as Garbler.

***

Writing header file here /home/cc/conclave/demo/tpch_one/1GB/example-oblivc-job-2

***
example-oblivc-job-2: /home/cc/conclave/demo/tpch_one/1GB/example-oblivc-job-2/bash.sh dispatching Obliv-C job. 
took 59.44561981991865 seconds to run MPC
{'user_config': {'pid': 1, 'leaky_ops': 0, 'use_floats': 0, 'workflow_name': 'example', 'all_pids': [1, 2], 'paths': {'input_path': '/home/cc/conclave/demo/tpch_one/1GB'}}, 'net': {'parties': [{'port': 9001, 'host': '0.0.0.0'}, {'port': 9002, 'host': '0.0.0.0'}]}, 'backends': {'oblivc': {'ip_port': 'localhost:1234', 'available': 1, 'party_count': '2', 'oc_path': '/home/cc/obliv-c/bin/oblivcc'}}}
MPCPushDown rewriting lineitem0
MPCPushDown rewriting lineitem1
MPCPushDown rewriting lineitem
MPCPushDown rewriting by_quantity
MPCPushDown rewriting sorted
UpdateColumns rewriting lineitem0
UpdateColumns rewriting by_quantity_0
UpdateColumns rewriting lineitem1
UpdateColumns rewriting by_quantity_1
UpdateColumns rewriting lineitem
UpdateColumns rewriting by_quantity_obl
UpdateColumns rewriting sorted
MPCPushUp rewriting sorted
MPCPushUp rewriting by_quantity_obl
MPCPushUp rewriting lineitem
MPCPushUp rewriting by_quantity_1
MPCPushUp rewriting lineitem1
MPCPushUp rewriting by_quantity_0
MPCPushUp rewriting lineitem0
TrustSetPropDown rewriting lineitem0
TrustSetPropDown rewriting by_quantity_0
TrustSetPropDown rewriting lineitem1
TrustSetPropDown rewriting by_quantity_1
TrustSetPropDown rewriting lineitem
TrustSetPropDown rewriting by_quantity_obl
TrustSetPropDown rewriting sorted
HybridOperatorOpt rewriting lineitem0
HybridOperatorOpt rewriting by_quantity_0
HybridOperatorOpt rewriting lineitem1
HybridOperatorOpt rewriting by_quantity_1
HybridOperatorOpt rewriting lineitem
HybridOperatorOpt rewriting by_quantity_obl
HybridOperatorOpt rewriting sorted
InsertOpenAndCloseOps rewriting lineitem0
InsertOpenAndCloseOps rewriting by_quantity_0
False
{<conclave.dag.Concat object at 0x7f9416f4e690>}
InsertOpenAndCloseOps rewriting lineitem1
InsertOpenAndCloseOps rewriting by_quantity_1
False
{<conclave.dag.Concat object at 0x7f9416f4e690>}
InsertOpenAndCloseOps rewriting lineitem
InsertOpenAndCloseOps rewriting by_quantity_obl
True
{<conclave.dag.SortBy object at 0x7f9416f4ed90>}
InsertOpenAndCloseOps rewriting sorted
True
set()
ExpandCompositeOps rewriting lineitem0
ExpandCompositeOps rewriting by_quantity_0
ExpandCompositeOps rewriting by_quantity_0_close
ExpandCompositeOps rewriting lineitem1
ExpandCompositeOps rewriting by_quantity_1
ExpandCompositeOps rewriting by_quantity_1_close
ExpandCompositeOps rewriting lineitem
ExpandCompositeOps rewriting by_quantity_obl
ExpandCompositeOps rewriting sorted
ExpandCompositeOps rewriting sorted_open
StoredWithSimplifier rewriting lineitem0
StoredWithSimplifier rewriting by_quantity_0
StoredWithSimplifier rewriting by_quantity_0_close
StoredWithSimplifier rewriting lineitem1
StoredWithSimplifier rewriting by_quantity_1
StoredWithSimplifier rewriting by_quantity_1_close
StoredWithSimplifier rewriting lineitem
StoredWithSimplifier rewriting by_quantity_obl
StoredWithSimplifier rewriting sorted
StoredWithSimplifier rewriting sorted_open
EliminateSorts rewriting lineitem0
EliminateSorts rewriting by_quantity_0
EliminateSorts rewriting by_quantity_0_close
EliminateSorts rewriting lineitem1
EliminateSorts rewriting by_quantity_1
EliminateSorts rewriting by_quantity_1_close
EliminateSorts rewriting lineitem
EliminateSorts rewriting by_quantity_obl
EliminateSorts rewriting sorted
EliminateSorts rewriting sorted_open
##################
CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}

##################
python {1} CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}

python {2} CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}

obliv-c {1, 2} CREATE RELATION by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}
MPCPushDown rewriting lineitem0
MPCPushDown rewriting lineitem1
MPCPushDown rewriting lineitem
MPCPushDown rewriting by_quantity
MPCPushDown rewriting sorted
UpdateColumns rewriting lineitem0
UpdateColumns rewriting by_quantity_0
UpdateColumns rewriting lineitem1
UpdateColumns rewriting by_quantity_1
UpdateColumns rewriting lineitem
UpdateColumns rewriting by_quantity_obl
UpdateColumns rewriting sorted
MPCPushUp rewriting sorted
MPCPushUp rewriting by_quantity_obl
MPCPushUp rewriting lineitem
MPCPushUp rewriting by_quantity_1
MPCPushUp rewriting lineitem1
MPCPushUp rewriting by_quantity_0
MPCPushUp rewriting lineitem0
TrustSetPropDown rewriting lineitem0
TrustSetPropDown rewriting by_quantity_0
TrustSetPropDown rewriting lineitem1
TrustSetPropDown rewriting by_quantity_1
TrustSetPropDown rewriting lineitem
TrustSetPropDown rewriting by_quantity_obl
TrustSetPropDown rewriting sorted
HybridOperatorOpt rewriting lineitem0
HybridOperatorOpt rewriting by_quantity_0
HybridOperatorOpt rewriting lineitem1
HybridOperatorOpt rewriting by_quantity_1
HybridOperatorOpt rewriting lineitem
HybridOperatorOpt rewriting by_quantity_obl
HybridOperatorOpt rewriting sorted
InsertOpenAndCloseOps rewriting lineitem0
InsertOpenAndCloseOps rewriting by_quantity_0
False
{<conclave.dag.Concat object at 0x7f9416f4ef90>}
InsertOpenAndCloseOps rewriting lineitem1
InsertOpenAndCloseOps rewriting by_quantity_1
False
{<conclave.dag.Concat object at 0x7f9416f4ef90>}
InsertOpenAndCloseOps rewriting lineitem
InsertOpenAndCloseOps rewriting by_quantity_obl
True
{<conclave.dag.SortBy object at 0x7f9416f4e6d0>}
InsertOpenAndCloseOps rewriting sorted
True
set()
ExpandCompositeOps rewriting lineitem0
ExpandCompositeOps rewriting by_quantity_0
ExpandCompositeOps rewriting by_quantity_0_close
ExpandCompositeOps rewriting lineitem1
ExpandCompositeOps rewriting by_quantity_1
ExpandCompositeOps rewriting by_quantity_1_close
ExpandCompositeOps rewriting lineitem
ExpandCompositeOps rewriting by_quantity_obl
ExpandCompositeOps rewriting sorted
ExpandCompositeOps rewriting sorted_open
StoredWithSimplifier rewriting lineitem0
StoredWithSimplifier rewriting by_quantity_0
StoredWithSimplifier rewriting by_quantity_0_close
StoredWithSimplifier rewriting lineitem1
StoredWithSimplifier rewriting by_quantity_1
StoredWithSimplifier rewriting by_quantity_1_close
StoredWithSimplifier rewriting lineitem
StoredWithSimplifier rewriting by_quantity_obl
StoredWithSimplifier rewriting sorted
StoredWithSimplifier rewriting sorted_open
EliminateSorts rewriting lineitem0
EliminateSorts rewriting by_quantity_0
EliminateSorts rewriting by_quantity_0_close
EliminateSorts rewriting lineitem1
EliminateSorts rewriting by_quantity_1
EliminateSorts rewriting by_quantity_1_close
EliminateSorts rewriting lineitem
EliminateSorts rewriting by_quantity_obl
EliminateSorts rewriting sorted
EliminateSorts rewriting sorted_open
##################
CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}

##################
python {1} CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}

python {2} CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}

obliv-c {1, 2} CREATE RELATION by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}
start python
Will write to /home/cc/conclave/demo/tpch_one/1GB/by_quantity_0.csv
done python
start python
Will write to /home/cc/conclave/demo/tpch_two/1GB/by_quantity_1.csv
done python
Connecting to localhost on port 1234 ...
Connecting to localhost on port 1234 ...

0 python
1 python
2 obliv-c
Will connect to 1 at 0.0.0.0:9001
Missing Jiff config 

Skipping other party's job:  <conclave.job.PythonJob object at 0x7f9416f61510>
example-python-job-1: /home/cc/conclave/demo/tpch_two/1GB/example-python-job-1/workflow.py running
Dispatching as Evaluator.

done msg received DoneMsg(1)
Obliv-C DoneMsg received.

***

Writing header file here /home/cc/conclave/demo/tpch_two/1GB/example-oblivc-job-2

***
example-oblivc-job-2: /home/cc/conclave/demo/tpch_two/1GB/example-oblivc-job-2/bash.sh dispatching Obliv-C job. 

0 python
1 python
2 obliv-c
Will wait for 2 to connect
iam msg received IAMMsg(2)
Missing Jiff config 

example-python-job-0: /home/cc/conclave/demo/tpch_one/1GB/example-python-job-0/workflow.py running
Skipping other party's job:  <conclave.job.PythonJob object at 0x7f9416f57f90>
Dispatching as Garbler.

***

Writing header file here /home/cc/conclave/demo/tpch_one/1GB/example-oblivc-job-2

***
example-oblivc-job-2: /home/cc/conclave/demo/tpch_one/1GB/example-oblivc-job-2/bash.sh dispatching Obliv-C job. 
took 59.73762580996845 seconds to run MPC
{'user_config': {'pid': 1, 'leaky_ops': 0, 'use_floats': 0, 'workflow_name': 'example', 'all_pids': [1, 2], 'paths': {'input_path': '/home/cc/conclave/demo/tpch_one/1GB'}}, 'net': {'parties': [{'port': 9001, 'host': '0.0.0.0'}, {'port': 9002, 'host': '0.0.0.0'}]}, 'backends': {'oblivc': {'ip_port': 'localhost:1234', 'available': 1, 'party_count': '2', 'oc_path': '/home/cc/obliv-c/bin/oblivcc'}}}
MPCPushDown rewriting lineitem0
MPCPushDown rewriting lineitem1
MPCPushDown rewriting lineitem
MPCPushDown rewriting by_quantity
MPCPushDown rewriting sorted
UpdateColumns rewriting lineitem0
UpdateColumns rewriting by_quantity_0
UpdateColumns rewriting lineitem1
UpdateColumns rewriting by_quantity_1
UpdateColumns rewriting lineitem
UpdateColumns rewriting by_quantity_obl
UpdateColumns rewriting sorted
MPCPushUp rewriting sorted
MPCPushUp rewriting by_quantity_obl
MPCPushUp rewriting lineitem
MPCPushUp rewriting by_quantity_1
MPCPushUp rewriting lineitem1
MPCPushUp rewriting by_quantity_0
MPCPushUp rewriting lineitem0
TrustSetPropDown rewriting lineitem0
TrustSetPropDown rewriting by_quantity_0
TrustSetPropDown rewriting lineitem1
TrustSetPropDown rewriting by_quantity_1
TrustSetPropDown rewriting lineitem
TrustSetPropDown rewriting by_quantity_obl
TrustSetPropDown rewriting sorted
HybridOperatorOpt rewriting lineitem0
HybridOperatorOpt rewriting by_quantity_0
HybridOperatorOpt rewriting lineitem1
HybridOperatorOpt rewriting by_quantity_1
HybridOperatorOpt rewriting lineitem
HybridOperatorOpt rewriting by_quantity_obl
HybridOperatorOpt rewriting sorted
InsertOpenAndCloseOps rewriting lineitem0
InsertOpenAndCloseOps rewriting by_quantity_0
False
{<conclave.dag.Concat object at 0x7f9416f0a610>}
InsertOpenAndCloseOps rewriting lineitem1
InsertOpenAndCloseOps rewriting by_quantity_1
False
{<conclave.dag.Concat object at 0x7f9416f0a610>}
InsertOpenAndCloseOps rewriting lineitem
InsertOpenAndCloseOps rewriting by_quantity_obl
True
{<conclave.dag.SortBy object at 0x7f9416f0ae50>}
InsertOpenAndCloseOps rewriting sorted
True
set()
ExpandCompositeOps rewriting lineitem0
ExpandCompositeOps rewriting by_quantity_0
ExpandCompositeOps rewriting by_quantity_0_close
ExpandCompositeOps rewriting lineitem1
ExpandCompositeOps rewriting by_quantity_1
ExpandCompositeOps rewriting by_quantity_1_close
ExpandCompositeOps rewriting lineitem
ExpandCompositeOps rewriting by_quantity_obl
ExpandCompositeOps rewriting sorted
ExpandCompositeOps rewriting sorted_open
StoredWithSimplifier rewriting lineitem0
StoredWithSimplifier rewriting by_quantity_0
StoredWithSimplifier rewriting by_quantity_0_close
StoredWithSimplifier rewriting lineitem1
StoredWithSimplifier rewriting by_quantity_1
StoredWithSimplifier rewriting by_quantity_1_close
StoredWithSimplifier rewriting lineitem
StoredWithSimplifier rewriting by_quantity_obl
StoredWithSimplifier rewriting sorted
StoredWithSimplifier rewriting sorted_open
EliminateSorts rewriting lineitem0
EliminateSorts rewriting by_quantity_0
EliminateSorts rewriting by_quantity_0_close
EliminateSorts rewriting lineitem1
EliminateSorts rewriting by_quantity_1
EliminateSorts rewriting by_quantity_1_close
EliminateSorts rewriting lineitem
EliminateSorts rewriting by_quantity_obl
EliminateSorts rewriting sorted
EliminateSorts rewriting sorted_open
##################
CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}

##################
python {1} CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}

python {2} CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}

obliv-c {1, 2} CREATE RELATION by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}
MPCPushDown rewriting lineitem0
MPCPushDown rewriting lineitem1
MPCPushDown rewriting lineitem
MPCPushDown rewriting by_quantity
MPCPushDown rewriting sorted
UpdateColumns rewriting lineitem0
UpdateColumns rewriting by_quantity_0
UpdateColumns rewriting lineitem1
UpdateColumns rewriting by_quantity_1
UpdateColumns rewriting lineitem
UpdateColumns rewriting by_quantity_obl
UpdateColumns rewriting sorted
MPCPushUp rewriting sorted
MPCPushUp rewriting by_quantity_obl
MPCPushUp rewriting lineitem
MPCPushUp rewriting by_quantity_1
MPCPushUp rewriting lineitem1
MPCPushUp rewriting by_quantity_0
MPCPushUp rewriting lineitem0
TrustSetPropDown rewriting lineitem0
TrustSetPropDown rewriting by_quantity_0
TrustSetPropDown rewriting lineitem1
TrustSetPropDown rewriting by_quantity_1
TrustSetPropDown rewriting lineitem
TrustSetPropDown rewriting by_quantity_obl
TrustSetPropDown rewriting sorted
HybridOperatorOpt rewriting lineitem0
HybridOperatorOpt rewriting by_quantity_0
HybridOperatorOpt rewriting lineitem1
HybridOperatorOpt rewriting by_quantity_1
HybridOperatorOpt rewriting lineitem
HybridOperatorOpt rewriting by_quantity_obl
HybridOperatorOpt rewriting sorted
InsertOpenAndCloseOps rewriting lineitem0
InsertOpenAndCloseOps rewriting by_quantity_0
False
{<conclave.dag.Concat object at 0x7f9416f032d0>}
InsertOpenAndCloseOps rewriting lineitem1
InsertOpenAndCloseOps rewriting by_quantity_1
False
{<conclave.dag.Concat object at 0x7f9416f032d0>}
InsertOpenAndCloseOps rewriting lineitem
InsertOpenAndCloseOps rewriting by_quantity_obl
True
{<conclave.dag.SortBy object at 0x7f9416f03210>}
InsertOpenAndCloseOps rewriting sorted
True
set()
ExpandCompositeOps rewriting lineitem0
ExpandCompositeOps rewriting by_quantity_0
ExpandCompositeOps rewriting by_quantity_0_close
ExpandCompositeOps rewriting lineitem1
ExpandCompositeOps rewriting by_quantity_1
ExpandCompositeOps rewriting by_quantity_1_close
ExpandCompositeOps rewriting lineitem
ExpandCompositeOps rewriting by_quantity_obl
ExpandCompositeOps rewriting sorted
ExpandCompositeOps rewriting sorted_open
StoredWithSimplifier rewriting lineitem0
StoredWithSimplifier rewriting by_quantity_0
StoredWithSimplifier rewriting by_quantity_0_close
StoredWithSimplifier rewriting lineitem1
StoredWithSimplifier rewriting by_quantity_1
StoredWithSimplifier rewriting by_quantity_1_close
StoredWithSimplifier rewriting lineitem
StoredWithSimplifier rewriting by_quantity_obl
StoredWithSimplifier rewriting sorted
StoredWithSimplifier rewriting sorted_open
EliminateSorts rewriting lineitem0
EliminateSorts rewriting by_quantity_0
EliminateSorts rewriting by_quantity_0_close
EliminateSorts rewriting lineitem1
EliminateSorts rewriting by_quantity_1
EliminateSorts rewriting by_quantity_1_close
EliminateSorts rewriting lineitem
EliminateSorts rewriting by_quantity_obl
EliminateSorts rewriting sorted
EliminateSorts rewriting sorted_open
##################
CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}

##################
python {1} CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}

python {2} CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}

obliv-c {1, 2} CREATE RELATION by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}
start python
Will write to /home/cc/conclave/demo/tpch_one/1GB/by_quantity_0.csv
done python
start python
Will write to /home/cc/conclave/demo/tpch_two/1GB/by_quantity_1.csv
done python
Connecting to localhost on port 1234 ...
Connecting to localhost on port 1234 ...

0 python
1 python
2 obliv-c
Will connect to 1 at 0.0.0.0:9001
Missing Jiff config 

Skipping other party's job:  <conclave.job.PythonJob object at 0x7f9416f0ad90>
example-python-job-1: /home/cc/conclave/demo/tpch_two/1GB/example-python-job-1/workflow.py running
Dispatching as Evaluator.

done msg received DoneMsg(1)
Obliv-C DoneMsg received.

***

Writing header file here /home/cc/conclave/demo/tpch_two/1GB/example-oblivc-job-2

***
example-oblivc-job-2: /home/cc/conclave/demo/tpch_two/1GB/example-oblivc-job-2/bash.sh dispatching Obliv-C job. 

0 python
1 python
2 obliv-c
Will wait for 2 to connect
iam msg received IAMMsg(2)
Missing Jiff config 

example-python-job-0: /home/cc/conclave/demo/tpch_one/1GB/example-python-job-0/workflow.py running
Skipping other party's job:  <conclave.job.PythonJob object at 0x7f9416eb6810>
Dispatching as Garbler.

***

Writing header file here /home/cc/conclave/demo/tpch_one/1GB/example-oblivc-job-2

***
example-oblivc-job-2: /home/cc/conclave/demo/tpch_one/1GB/example-oblivc-job-2/bash.sh dispatching Obliv-C job. 
took 60.360529672005214 seconds to run MPC
{'user_config': {'pid': 1, 'leaky_ops': 0, 'use_floats': 0, 'workflow_name': 'example', 'all_pids': [1, 2], 'paths': {'input_path': '/home/cc/conclave/demo/tpch_one/1GB'}}, 'net': {'parties': [{'port': 9001, 'host': '0.0.0.0'}, {'port': 9002, 'host': '0.0.0.0'}]}, 'backends': {'oblivc': {'ip_port': 'localhost:1234', 'available': 1, 'party_count': '2', 'oc_path': '/home/cc/obliv-c/bin/oblivcc'}}}
MPCPushDown rewriting lineitem0
MPCPushDown rewriting lineitem1
MPCPushDown rewriting lineitem
MPCPushDown rewriting by_quantity
MPCPushDown rewriting sorted
UpdateColumns rewriting lineitem0
UpdateColumns rewriting by_quantity_0
UpdateColumns rewriting lineitem1
UpdateColumns rewriting by_quantity_1
UpdateColumns rewriting lineitem
UpdateColumns rewriting by_quantity_obl
UpdateColumns rewriting sorted
MPCPushUp rewriting sorted
MPCPushUp rewriting by_quantity_obl
MPCPushUp rewriting lineitem
MPCPushUp rewriting by_quantity_1
MPCPushUp rewriting lineitem1
MPCPushUp rewriting by_quantity_0
MPCPushUp rewriting lineitem0
TrustSetPropDown rewriting lineitem0
TrustSetPropDown rewriting by_quantity_0
TrustSetPropDown rewriting lineitem1
TrustSetPropDown rewriting by_quantity_1
TrustSetPropDown rewriting lineitem
TrustSetPropDown rewriting by_quantity_obl
TrustSetPropDown rewriting sorted
HybridOperatorOpt rewriting lineitem0
HybridOperatorOpt rewriting by_quantity_0
HybridOperatorOpt rewriting lineitem1
HybridOperatorOpt rewriting by_quantity_1
HybridOperatorOpt rewriting lineitem
HybridOperatorOpt rewriting by_quantity_obl
HybridOperatorOpt rewriting sorted
InsertOpenAndCloseOps rewriting lineitem0
InsertOpenAndCloseOps rewriting by_quantity_0
False
{<conclave.dag.Concat object at 0x7f9416f61e90>}
InsertOpenAndCloseOps rewriting lineitem1
InsertOpenAndCloseOps rewriting by_quantity_1
False
{<conclave.dag.Concat object at 0x7f9416f61e90>}
InsertOpenAndCloseOps rewriting lineitem
InsertOpenAndCloseOps rewriting by_quantity_obl
True
{<conclave.dag.SortBy object at 0x7f9416f4e5d0>}
InsertOpenAndCloseOps rewriting sorted
True
set()
ExpandCompositeOps rewriting lineitem0
ExpandCompositeOps rewriting by_quantity_0
ExpandCompositeOps rewriting by_quantity_0_close
ExpandCompositeOps rewriting lineitem1
ExpandCompositeOps rewriting by_quantity_1
ExpandCompositeOps rewriting by_quantity_1_close
ExpandCompositeOps rewriting lineitem
ExpandCompositeOps rewriting by_quantity_obl
ExpandCompositeOps rewriting sorted
ExpandCompositeOps rewriting sorted_open
StoredWithSimplifier rewriting lineitem0
StoredWithSimplifier rewriting by_quantity_0
StoredWithSimplifier rewriting by_quantity_0_close
StoredWithSimplifier rewriting lineitem1
StoredWithSimplifier rewriting by_quantity_1
StoredWithSimplifier rewriting by_quantity_1_close
StoredWithSimplifier rewriting lineitem
StoredWithSimplifier rewriting by_quantity_obl
StoredWithSimplifier rewriting sorted
StoredWithSimplifier rewriting sorted_open
EliminateSorts rewriting lineitem0
EliminateSorts rewriting by_quantity_0
EliminateSorts rewriting by_quantity_0_close
EliminateSorts rewriting lineitem1
EliminateSorts rewriting by_quantity_1
EliminateSorts rewriting by_quantity_1_close
EliminateSorts rewriting lineitem
EliminateSorts rewriting by_quantity_obl
EliminateSorts rewriting sorted
EliminateSorts rewriting sorted_open
##################
CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}

##################
python {1} CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}

python {2} CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}

obliv-c {1, 2} CREATE RELATION by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}
MPCPushDown rewriting lineitem0
MPCPushDown rewriting lineitem1
MPCPushDown rewriting lineitem
MPCPushDown rewriting by_quantity
MPCPushDown rewriting sorted
UpdateColumns rewriting lineitem0
UpdateColumns rewriting by_quantity_0
UpdateColumns rewriting lineitem1
UpdateColumns rewriting by_quantity_1
UpdateColumns rewriting lineitem
UpdateColumns rewriting by_quantity_obl
UpdateColumns rewriting sorted
MPCPushUp rewriting sorted
MPCPushUp rewriting by_quantity_obl
MPCPushUp rewriting lineitem
MPCPushUp rewriting by_quantity_1
MPCPushUp rewriting lineitem1
MPCPushUp rewriting by_quantity_0
MPCPushUp rewriting lineitem0
TrustSetPropDown rewriting lineitem0
TrustSetPropDown rewriting by_quantity_0
TrustSetPropDown rewriting lineitem1
TrustSetPropDown rewriting by_quantity_1
TrustSetPropDown rewriting lineitem
TrustSetPropDown rewriting by_quantity_obl
TrustSetPropDown rewriting sorted
HybridOperatorOpt rewriting lineitem0
HybridOperatorOpt rewriting by_quantity_0
HybridOperatorOpt rewriting lineitem1
HybridOperatorOpt rewriting by_quantity_1
HybridOperatorOpt rewriting lineitem
HybridOperatorOpt rewriting by_quantity_obl
HybridOperatorOpt rewriting sorted
InsertOpenAndCloseOps rewriting lineitem0
InsertOpenAndCloseOps rewriting by_quantity_0
False
{<conclave.dag.Concat object at 0x7f9416f4e2d0>}
InsertOpenAndCloseOps rewriting lineitem1
InsertOpenAndCloseOps rewriting by_quantity_1
False
{<conclave.dag.Concat object at 0x7f9416f4e2d0>}
InsertOpenAndCloseOps rewriting lineitem
InsertOpenAndCloseOps rewriting by_quantity_obl
True
{<conclave.dag.SortBy object at 0x7f9416ec2190>}
InsertOpenAndCloseOps rewriting sorted
True
set()
ExpandCompositeOps rewriting lineitem0
ExpandCompositeOps rewriting by_quantity_0
ExpandCompositeOps rewriting by_quantity_0_close
ExpandCompositeOps rewriting lineitem1
ExpandCompositeOps rewriting by_quantity_1
ExpandCompositeOps rewriting by_quantity_1_close
ExpandCompositeOps rewriting lineitem
ExpandCompositeOps rewriting by_quantity_obl
ExpandCompositeOps rewriting sorted
ExpandCompositeOps rewriting sorted_open
StoredWithSimplifier rewriting lineitem0
StoredWithSimplifier rewriting by_quantity_0
StoredWithSimplifier rewriting by_quantity_0_close
StoredWithSimplifier rewriting lineitem1
StoredWithSimplifier rewriting by_quantity_1
StoredWithSimplifier rewriting by_quantity_1_close
StoredWithSimplifier rewriting lineitem
StoredWithSimplifier rewriting by_quantity_obl
StoredWithSimplifier rewriting sorted
StoredWithSimplifier rewriting sorted_open
EliminateSorts rewriting lineitem0
EliminateSorts rewriting by_quantity_0
EliminateSorts rewriting by_quantity_0_close
EliminateSorts rewriting lineitem1
EliminateSorts rewriting by_quantity_1
EliminateSorts rewriting by_quantity_1_close
EliminateSorts rewriting lineitem
EliminateSorts rewriting by_quantity_obl
EliminateSorts rewriting sorted
EliminateSorts rewriting sorted_open
##################
CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}

##################
python {1} CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}

python {2} CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}

obliv-c {1, 2} CREATE RELATION by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}
start python
Will write to /home/cc/conclave/demo/tpch_one/1GB/by_quantity_0.csv
done python
start python
Will write to /home/cc/conclave/demo/tpch_two/1GB/by_quantity_1.csv
done python
Connecting to localhost on port 1234 ...
Connecting to localhost on port 1234 ...

0 python
1 python
2 obliv-c
Will connect to 1 at 0.0.0.0:9001
Missing Jiff config 

Skipping other party's job:  <conclave.job.PythonJob object at 0x7f9416f61150>
example-python-job-1: /home/cc/conclave/demo/tpch_two/1GB/example-python-job-1/workflow.py running
Dispatching as Evaluator.

done msg received DoneMsg(1)
Obliv-C DoneMsg received.

***

Writing header file here /home/cc/conclave/demo/tpch_two/1GB/example-oblivc-job-2

***
example-oblivc-job-2: /home/cc/conclave/demo/tpch_two/1GB/example-oblivc-job-2/bash.sh dispatching Obliv-C job. 

0 python
1 python
2 obliv-c
Will wait for 2 to connect
iam msg received IAMMsg(2)
Missing Jiff config 

example-python-job-0: /home/cc/conclave/demo/tpch_one/1GB/example-python-job-0/workflow.py running
Skipping other party's job:  <conclave.job.PythonJob object at 0x7f9416f57a90>
Dispatching as Garbler.

***

Writing header file here /home/cc/conclave/demo/tpch_one/1GB/example-oblivc-job-2

***
example-oblivc-job-2: /home/cc/conclave/demo/tpch_one/1GB/example-oblivc-job-2/bash.sh dispatching Obliv-C job. 
took 59.17536598397419 seconds to run MPC
{'user_config': {'pid': 1, 'leaky_ops': 0, 'use_floats': 0, 'workflow_name': 'example', 'all_pids': [1, 2], 'paths': {'input_path': '/home/cc/conclave/demo/tpch_one/1GB'}}, 'net': {'parties': [{'port': 9001, 'host': '0.0.0.0'}, {'port': 9002, 'host': '0.0.0.0'}]}, 'backends': {'oblivc': {'ip_port': 'localhost:1234', 'available': 1, 'party_count': '2', 'oc_path': '/home/cc/obliv-c/bin/oblivcc'}}}
MPCPushDown rewriting lineitem0
MPCPushDown rewriting lineitem1
MPCPushDown rewriting lineitem
MPCPushDown rewriting by_quantity
MPCPushDown rewriting sorted
UpdateColumns rewriting lineitem0
UpdateColumns rewriting by_quantity_0
UpdateColumns rewriting lineitem1
UpdateColumns rewriting by_quantity_1
UpdateColumns rewriting lineitem
UpdateColumns rewriting by_quantity_obl
UpdateColumns rewriting sorted
MPCPushUp rewriting sorted
MPCPushUp rewriting by_quantity_obl
MPCPushUp rewriting lineitem
MPCPushUp rewriting by_quantity_1
MPCPushUp rewriting lineitem1
MPCPushUp rewriting by_quantity_0
MPCPushUp rewriting lineitem0
TrustSetPropDown rewriting lineitem0
TrustSetPropDown rewriting by_quantity_0
TrustSetPropDown rewriting lineitem1
TrustSetPropDown rewriting by_quantity_1
TrustSetPropDown rewriting lineitem
TrustSetPropDown rewriting by_quantity_obl
TrustSetPropDown rewriting sorted
HybridOperatorOpt rewriting lineitem0
HybridOperatorOpt rewriting by_quantity_0
HybridOperatorOpt rewriting lineitem1
HybridOperatorOpt rewriting by_quantity_1
HybridOperatorOpt rewriting lineitem
HybridOperatorOpt rewriting by_quantity_obl
HybridOperatorOpt rewriting sorted
InsertOpenAndCloseOps rewriting lineitem0
InsertOpenAndCloseOps rewriting by_quantity_0
False
{<conclave.dag.Concat object at 0x7f9416eb6790>}
InsertOpenAndCloseOps rewriting lineitem1
InsertOpenAndCloseOps rewriting by_quantity_1
False
{<conclave.dag.Concat object at 0x7f9416eb6790>}
InsertOpenAndCloseOps rewriting lineitem
InsertOpenAndCloseOps rewriting by_quantity_obl
True
{<conclave.dag.SortBy object at 0x7f9416eb6610>}
InsertOpenAndCloseOps rewriting sorted
True
set()
ExpandCompositeOps rewriting lineitem0
ExpandCompositeOps rewriting by_quantity_0
ExpandCompositeOps rewriting by_quantity_0_close
ExpandCompositeOps rewriting lineitem1
ExpandCompositeOps rewriting by_quantity_1
ExpandCompositeOps rewriting by_quantity_1_close
ExpandCompositeOps rewriting lineitem
ExpandCompositeOps rewriting by_quantity_obl
ExpandCompositeOps rewriting sorted
ExpandCompositeOps rewriting sorted_open
StoredWithSimplifier rewriting lineitem0
StoredWithSimplifier rewriting by_quantity_0
StoredWithSimplifier rewriting by_quantity_0_close
StoredWithSimplifier rewriting lineitem1
StoredWithSimplifier rewriting by_quantity_1
StoredWithSimplifier rewriting by_quantity_1_close
StoredWithSimplifier rewriting lineitem
StoredWithSimplifier rewriting by_quantity_obl
StoredWithSimplifier rewriting sorted
StoredWithSimplifier rewriting sorted_open
EliminateSorts rewriting lineitem0
EliminateSorts rewriting by_quantity_0
EliminateSorts rewriting by_quantity_0_close
EliminateSorts rewriting lineitem1
EliminateSorts rewriting by_quantity_1
EliminateSorts rewriting by_quantity_1_close
EliminateSorts rewriting lineitem
EliminateSorts rewriting by_quantity_obl
EliminateSorts rewriting sorted
EliminateSorts rewriting sorted_open
##################
CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}

##################
python {1} CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}

python {2} CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}

obliv-c {1, 2} CREATE RELATION by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}
MPCPushDown rewriting lineitem0
MPCPushDown rewriting lineitem1
MPCPushDown rewriting lineitem
MPCPushDown rewriting by_quantity
MPCPushDown rewriting sorted
UpdateColumns rewriting lineitem0
UpdateColumns rewriting by_quantity_0
UpdateColumns rewriting lineitem1
UpdateColumns rewriting by_quantity_1
UpdateColumns rewriting lineitem
UpdateColumns rewriting by_quantity_obl
UpdateColumns rewriting sorted
MPCPushUp rewriting sorted
MPCPushUp rewriting by_quantity_obl
MPCPushUp rewriting lineitem
MPCPushUp rewriting by_quantity_1
MPCPushUp rewriting lineitem1
MPCPushUp rewriting by_quantity_0
MPCPushUp rewriting lineitem0
TrustSetPropDown rewriting lineitem0
TrustSetPropDown rewriting by_quantity_0
TrustSetPropDown rewriting lineitem1
TrustSetPropDown rewriting by_quantity_1
TrustSetPropDown rewriting lineitem
TrustSetPropDown rewriting by_quantity_obl
TrustSetPropDown rewriting sorted
HybridOperatorOpt rewriting lineitem0
HybridOperatorOpt rewriting by_quantity_0
HybridOperatorOpt rewriting lineitem1
HybridOperatorOpt rewriting by_quantity_1
HybridOperatorOpt rewriting lineitem
HybridOperatorOpt rewriting by_quantity_obl
HybridOperatorOpt rewriting sorted
InsertOpenAndCloseOps rewriting lineitem0
InsertOpenAndCloseOps rewriting by_quantity_0
False
{<conclave.dag.Concat object at 0x7f9416eb6cd0>}
InsertOpenAndCloseOps rewriting lineitem1
InsertOpenAndCloseOps rewriting by_quantity_1
False
{<conclave.dag.Concat object at 0x7f9416eb6cd0>}
InsertOpenAndCloseOps rewriting lineitem
InsertOpenAndCloseOps rewriting by_quantity_obl
True
{<conclave.dag.SortBy object at 0x7f9416ece590>}
InsertOpenAndCloseOps rewriting sorted
True
set()
ExpandCompositeOps rewriting lineitem0
ExpandCompositeOps rewriting by_quantity_0
ExpandCompositeOps rewriting by_quantity_0_close
ExpandCompositeOps rewriting lineitem1
ExpandCompositeOps rewriting by_quantity_1
ExpandCompositeOps rewriting by_quantity_1_close
ExpandCompositeOps rewriting lineitem
ExpandCompositeOps rewriting by_quantity_obl
ExpandCompositeOps rewriting sorted
ExpandCompositeOps rewriting sorted_open
StoredWithSimplifier rewriting lineitem0
StoredWithSimplifier rewriting by_quantity_0
StoredWithSimplifier rewriting by_quantity_0_close
StoredWithSimplifier rewriting lineitem1
StoredWithSimplifier rewriting by_quantity_1
StoredWithSimplifier rewriting by_quantity_1_close
StoredWithSimplifier rewriting lineitem
StoredWithSimplifier rewriting by_quantity_obl
StoredWithSimplifier rewriting sorted
StoredWithSimplifier rewriting sorted_open
EliminateSorts rewriting lineitem0
EliminateSorts rewriting by_quantity_0
EliminateSorts rewriting by_quantity_0_close
EliminateSorts rewriting lineitem1
EliminateSorts rewriting by_quantity_1
EliminateSorts rewriting by_quantity_1_close
EliminateSorts rewriting lineitem
EliminateSorts rewriting by_quantity_obl
EliminateSorts rewriting sorted
EliminateSorts rewriting sorted_open
##################
CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}

##################
python {1} CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}

python {2} CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}

obliv-c {1, 2} CREATE RELATION by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}
start python
Will write to /home/cc/conclave/demo/tpch_one/1GB/by_quantity_0.csv
done python
start python
Will write to /home/cc/conclave/demo/tpch_two/1GB/by_quantity_1.csv
done python
Connecting to localhost on port 1234 ...
Connecting to localhost on port 1234 ...

0 python
1 python
2 obliv-c
Will connect to 1 at 0.0.0.0:9001
Missing Jiff config 

Skipping other party's job:  <conclave.job.PythonJob object at 0x7f9416eb6b10>
example-python-job-1: /home/cc/conclave/demo/tpch_two/1GB/example-python-job-1/workflow.py running
Dispatching as Evaluator.

done msg received DoneMsg(1)
Obliv-C DoneMsg received.

***

Writing header file here /home/cc/conclave/demo/tpch_two/1GB/example-oblivc-job-2

***
example-oblivc-job-2: /home/cc/conclave/demo/tpch_two/1GB/example-oblivc-job-2/bash.sh dispatching Obliv-C job. 

0 python
1 python
2 obliv-c
Will wait for 2 to connect
iam msg received IAMMsg(2)
Missing Jiff config 

example-python-job-0: /home/cc/conclave/demo/tpch_one/1GB/example-python-job-0/workflow.py running
Skipping other party's job:  <conclave.job.PythonJob object at 0x7f9416ece950>
Dispatching as Garbler.

***

Writing header file here /home/cc/conclave/demo/tpch_one/1GB/example-oblivc-job-2

***
example-oblivc-job-2: /home/cc/conclave/demo/tpch_one/1GB/example-oblivc-job-2/bash.sh dispatching Obliv-C job. 
took 59.7535372111015 seconds to run MPC
{'user_config': {'pid': 1, 'leaky_ops': 0, 'use_floats': 0, 'workflow_name': 'example', 'all_pids': [1, 2], 'paths': {'input_path': '/home/cc/conclave/demo/tpch_one/1GB'}}, 'net': {'parties': [{'port': 9001, 'host': '0.0.0.0'}, {'port': 9002, 'host': '0.0.0.0'}]}, 'backends': {'oblivc': {'ip_port': 'localhost:1234', 'available': 1, 'party_count': '2', 'oc_path': '/home/cc/obliv-c/bin/oblivcc'}}}
MPCPushDown rewriting lineitem0
MPCPushDown rewriting lineitem1
MPCPushDown rewriting lineitem
MPCPushDown rewriting by_quantity
MPCPushDown rewriting sorted
UpdateColumns rewriting lineitem0
UpdateColumns rewriting by_quantity_0
UpdateColumns rewriting lineitem1
UpdateColumns rewriting by_quantity_1
UpdateColumns rewriting lineitem
UpdateColumns rewriting by_quantity_obl
UpdateColumns rewriting sorted
MPCPushUp rewriting sorted
MPCPushUp rewriting by_quantity_obl
MPCPushUp rewriting lineitem
MPCPushUp rewriting by_quantity_1
MPCPushUp rewriting lineitem1
MPCPushUp rewriting by_quantity_0
MPCPushUp rewriting lineitem0
TrustSetPropDown rewriting lineitem0
TrustSetPropDown rewriting by_quantity_0
TrustSetPropDown rewriting lineitem1
TrustSetPropDown rewriting by_quantity_1
TrustSetPropDown rewriting lineitem
TrustSetPropDown rewriting by_quantity_obl
TrustSetPropDown rewriting sorted
HybridOperatorOpt rewriting lineitem0
HybridOperatorOpt rewriting by_quantity_0
HybridOperatorOpt rewriting lineitem1
HybridOperatorOpt rewriting by_quantity_1
HybridOperatorOpt rewriting lineitem
HybridOperatorOpt rewriting by_quantity_obl
HybridOperatorOpt rewriting sorted
InsertOpenAndCloseOps rewriting lineitem0
InsertOpenAndCloseOps rewriting by_quantity_0
False
{<conclave.dag.Concat object at 0x7f9416ec2a90>}
InsertOpenAndCloseOps rewriting lineitem1
InsertOpenAndCloseOps rewriting by_quantity_1
False
{<conclave.dag.Concat object at 0x7f9416ec2a90>}
InsertOpenAndCloseOps rewriting lineitem
InsertOpenAndCloseOps rewriting by_quantity_obl
True
{<conclave.dag.SortBy object at 0x7f9416ec8190>}
InsertOpenAndCloseOps rewriting sorted
True
set()
ExpandCompositeOps rewriting lineitem0
ExpandCompositeOps rewriting by_quantity_0
ExpandCompositeOps rewriting by_quantity_0_close
ExpandCompositeOps rewriting lineitem1
ExpandCompositeOps rewriting by_quantity_1
ExpandCompositeOps rewriting by_quantity_1_close
ExpandCompositeOps rewriting lineitem
ExpandCompositeOps rewriting by_quantity_obl
ExpandCompositeOps rewriting sorted
ExpandCompositeOps rewriting sorted_open
StoredWithSimplifier rewriting lineitem0
StoredWithSimplifier rewriting by_quantity_0
StoredWithSimplifier rewriting by_quantity_0_close
StoredWithSimplifier rewriting lineitem1
StoredWithSimplifier rewriting by_quantity_1
StoredWithSimplifier rewriting by_quantity_1_close
StoredWithSimplifier rewriting lineitem
StoredWithSimplifier rewriting by_quantity_obl
StoredWithSimplifier rewriting sorted
StoredWithSimplifier rewriting sorted_open
EliminateSorts rewriting lineitem0
EliminateSorts rewriting by_quantity_0
EliminateSorts rewriting by_quantity_0_close
EliminateSorts rewriting lineitem1
EliminateSorts rewriting by_quantity_1
EliminateSorts rewriting by_quantity_1_close
EliminateSorts rewriting lineitem
EliminateSorts rewriting by_quantity_obl
EliminateSorts rewriting sorted
EliminateSorts rewriting sorted_open
##################
CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}

##################
python {1} CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}

python {2} CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}

obliv-c {1, 2} CREATE RELATION by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}
MPCPushDown rewriting lineitem0
MPCPushDown rewriting lineitem1
MPCPushDown rewriting lineitem
MPCPushDown rewriting by_quantity
MPCPushDown rewriting sorted
UpdateColumns rewriting lineitem0
UpdateColumns rewriting by_quantity_0
UpdateColumns rewriting lineitem1
UpdateColumns rewriting by_quantity_1
UpdateColumns rewriting lineitem
UpdateColumns rewriting by_quantity_obl
UpdateColumns rewriting sorted
MPCPushUp rewriting sorted
MPCPushUp rewriting by_quantity_obl
MPCPushUp rewriting lineitem
MPCPushUp rewriting by_quantity_1
MPCPushUp rewriting lineitem1
MPCPushUp rewriting by_quantity_0
MPCPushUp rewriting lineitem0
TrustSetPropDown rewriting lineitem0
TrustSetPropDown rewriting by_quantity_0
TrustSetPropDown rewriting lineitem1
TrustSetPropDown rewriting by_quantity_1
TrustSetPropDown rewriting lineitem
TrustSetPropDown rewriting by_quantity_obl
TrustSetPropDown rewriting sorted
HybridOperatorOpt rewriting lineitem0
HybridOperatorOpt rewriting by_quantity_0
HybridOperatorOpt rewriting lineitem1
HybridOperatorOpt rewriting by_quantity_1
HybridOperatorOpt rewriting lineitem
HybridOperatorOpt rewriting by_quantity_obl
HybridOperatorOpt rewriting sorted
InsertOpenAndCloseOps rewriting lineitem0
InsertOpenAndCloseOps rewriting by_quantity_0
False
{<conclave.dag.Concat object at 0x7f9416ec8710>}
InsertOpenAndCloseOps rewriting lineitem1
InsertOpenAndCloseOps rewriting by_quantity_1
False
{<conclave.dag.Concat object at 0x7f9416ec8710>}
InsertOpenAndCloseOps rewriting lineitem
InsertOpenAndCloseOps rewriting by_quantity_obl
True
{<conclave.dag.SortBy object at 0x7f9416ed7990>}
InsertOpenAndCloseOps rewriting sorted
True
set()
ExpandCompositeOps rewriting lineitem0
ExpandCompositeOps rewriting by_quantity_0
ExpandCompositeOps rewriting by_quantity_0_close
ExpandCompositeOps rewriting lineitem1
ExpandCompositeOps rewriting by_quantity_1
ExpandCompositeOps rewriting by_quantity_1_close
ExpandCompositeOps rewriting lineitem
ExpandCompositeOps rewriting by_quantity_obl
ExpandCompositeOps rewriting sorted
ExpandCompositeOps rewriting sorted_open
StoredWithSimplifier rewriting lineitem0
StoredWithSimplifier rewriting by_quantity_0
StoredWithSimplifier rewriting by_quantity_0_close
StoredWithSimplifier rewriting lineitem1
StoredWithSimplifier rewriting by_quantity_1
StoredWithSimplifier rewriting by_quantity_1_close
StoredWithSimplifier rewriting lineitem
StoredWithSimplifier rewriting by_quantity_obl
StoredWithSimplifier rewriting sorted
StoredWithSimplifier rewriting sorted_open
EliminateSorts rewriting lineitem0
EliminateSorts rewriting by_quantity_0
EliminateSorts rewriting by_quantity_0_close
EliminateSorts rewriting lineitem1
EliminateSorts rewriting by_quantity_1
EliminateSorts rewriting by_quantity_1_close
EliminateSorts rewriting lineitem
EliminateSorts rewriting by_quantity_obl
EliminateSorts rewriting sorted
EliminateSorts rewriting sorted_open
##################
CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}

##################
python {1} CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}

python {2} CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}

obliv-c {1, 2} CREATE RELATION by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}
start python
Will write to /home/cc/conclave/demo/tpch_two/1GB/by_quantity_1.csv
done python
start python
Will write to /home/cc/conclave/demo/tpch_one/1GB/by_quantity_0.csv
done python
Connecting to localhost on port 1234 ...
Connecting to localhost on port 1234 ...

0 python
1 python
2 obliv-c
Will connect to 1 at 0.0.0.0:9001
Missing Jiff config 

Skipping other party's job:  <conclave.job.PythonJob object at 0x7f9416ec8590>
example-python-job-1: /home/cc/conclave/demo/tpch_two/1GB/example-python-job-1/workflow.py running
Dispatching as Evaluator.

done msg received DoneMsg(1)
Obliv-C DoneMsg received.

***

Writing header file here /home/cc/conclave/demo/tpch_two/1GB/example-oblivc-job-2

***
example-oblivc-job-2: /home/cc/conclave/demo/tpch_two/1GB/example-oblivc-job-2/bash.sh dispatching Obliv-C job. 

0 python
1 python
2 obliv-c
Will wait for 2 to connect
iam msg received IAMMsg(2)
Missing Jiff config 

example-python-job-0: /home/cc/conclave/demo/tpch_one/1GB/example-python-job-0/workflow.py running
Skipping other party's job:  <conclave.job.PythonJob object at 0x7f9416ec28d0>
Dispatching as Garbler.

***

Writing header file here /home/cc/conclave/demo/tpch_one/1GB/example-oblivc-job-2

***
example-oblivc-job-2: /home/cc/conclave/demo/tpch_one/1GB/example-oblivc-job-2/bash.sh dispatching Obliv-C job. 
took 59.346821393002756 seconds to run MPC
{'user_config': {'pid': 1, 'leaky_ops': 0, 'use_floats': 0, 'workflow_name': 'example', 'all_pids': [1, 2], 'paths': {'input_path': '/home/cc/conclave/demo/tpch_one/1GB'}}, 'net': {'parties': [{'port': 9001, 'host': '0.0.0.0'}, {'port': 9002, 'host': '0.0.0.0'}]}, 'backends': {'oblivc': {'ip_port': 'localhost:1234', 'available': 1, 'party_count': '2', 'oc_path': '/home/cc/obliv-c/bin/oblivcc'}}}
MPCPushDown rewriting lineitem0
MPCPushDown rewriting lineitem1
MPCPushDown rewriting lineitem
MPCPushDown rewriting by_quantity
MPCPushDown rewriting sorted
UpdateColumns rewriting lineitem0
UpdateColumns rewriting by_quantity_0
UpdateColumns rewriting lineitem1
UpdateColumns rewriting by_quantity_1
UpdateColumns rewriting lineitem
UpdateColumns rewriting by_quantity_obl
UpdateColumns rewriting sorted
MPCPushUp rewriting sorted
MPCPushUp rewriting by_quantity_obl
MPCPushUp rewriting lineitem
MPCPushUp rewriting by_quantity_1
MPCPushUp rewriting lineitem1
MPCPushUp rewriting by_quantity_0
MPCPushUp rewriting lineitem0
TrustSetPropDown rewriting lineitem0
TrustSetPropDown rewriting by_quantity_0
TrustSetPropDown rewriting lineitem1
TrustSetPropDown rewriting by_quantity_1
TrustSetPropDown rewriting lineitem
TrustSetPropDown rewriting by_quantity_obl
TrustSetPropDown rewriting sorted
HybridOperatorOpt rewriting lineitem0
HybridOperatorOpt rewriting by_quantity_0
HybridOperatorOpt rewriting lineitem1
HybridOperatorOpt rewriting by_quantity_1
HybridOperatorOpt rewriting lineitem
HybridOperatorOpt rewriting by_quantity_obl
HybridOperatorOpt rewriting sorted
InsertOpenAndCloseOps rewriting lineitem0
InsertOpenAndCloseOps rewriting by_quantity_0
False
{<conclave.dag.Concat object at 0x7f9416ece950>}
InsertOpenAndCloseOps rewriting lineitem1
InsertOpenAndCloseOps rewriting by_quantity_1
False
{<conclave.dag.Concat object at 0x7f9416ece950>}
InsertOpenAndCloseOps rewriting lineitem
InsertOpenAndCloseOps rewriting by_quantity_obl
True
{<conclave.dag.SortBy object at 0x7f9416ecec90>}
InsertOpenAndCloseOps rewriting sorted
True
set()
ExpandCompositeOps rewriting lineitem0
ExpandCompositeOps rewriting by_quantity_0
ExpandCompositeOps rewriting by_quantity_0_close
ExpandCompositeOps rewriting lineitem1
ExpandCompositeOps rewriting by_quantity_1
ExpandCompositeOps rewriting by_quantity_1_close
ExpandCompositeOps rewriting lineitem
ExpandCompositeOps rewriting by_quantity_obl
ExpandCompositeOps rewriting sorted
ExpandCompositeOps rewriting sorted_open
StoredWithSimplifier rewriting lineitem0
StoredWithSimplifier rewriting by_quantity_0
StoredWithSimplifier rewriting by_quantity_0_close
StoredWithSimplifier rewriting lineitem1
StoredWithSimplifier rewriting by_quantity_1
StoredWithSimplifier rewriting by_quantity_1_close
StoredWithSimplifier rewriting lineitem
StoredWithSimplifier rewriting by_quantity_obl
StoredWithSimplifier rewriting sorted
StoredWithSimplifier rewriting sorted_open
EliminateSorts rewriting lineitem0
EliminateSorts rewriting by_quantity_0
EliminateSorts rewriting by_quantity_0_close
EliminateSorts rewriting lineitem1
EliminateSorts rewriting by_quantity_1
EliminateSorts rewriting by_quantity_1_close
EliminateSorts rewriting lineitem
EliminateSorts rewriting by_quantity_obl
EliminateSorts rewriting sorted
EliminateSorts rewriting sorted_open
##################
CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}

##################
python {1} CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}

python {2} CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}

obliv-c {1, 2} CREATE RELATION by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}
MPCPushDown rewriting lineitem0
MPCPushDown rewriting lineitem1
MPCPushDown rewriting lineitem
MPCPushDown rewriting by_quantity
MPCPushDown rewriting sorted
UpdateColumns rewriting lineitem0
UpdateColumns rewriting by_quantity_0
UpdateColumns rewriting lineitem1
UpdateColumns rewriting by_quantity_1
UpdateColumns rewriting lineitem
UpdateColumns rewriting by_quantity_obl
UpdateColumns rewriting sorted
MPCPushUp rewriting sorted
MPCPushUp rewriting by_quantity_obl
MPCPushUp rewriting lineitem
MPCPushUp rewriting by_quantity_1
MPCPushUp rewriting lineitem1
MPCPushUp rewriting by_quantity_0
MPCPushUp rewriting lineitem0
TrustSetPropDown rewriting lineitem0
TrustSetPropDown rewriting by_quantity_0
TrustSetPropDown rewriting lineitem1
TrustSetPropDown rewriting by_quantity_1
TrustSetPropDown rewriting lineitem
TrustSetPropDown rewriting by_quantity_obl
TrustSetPropDown rewriting sorted
HybridOperatorOpt rewriting lineitem0
HybridOperatorOpt rewriting by_quantity_0
HybridOperatorOpt rewriting lineitem1
HybridOperatorOpt rewriting by_quantity_1
HybridOperatorOpt rewriting lineitem
HybridOperatorOpt rewriting by_quantity_obl
HybridOperatorOpt rewriting sorted
InsertOpenAndCloseOps rewriting lineitem0
InsertOpenAndCloseOps rewriting by_quantity_0
False
{<conclave.dag.Concat object at 0x7f9416ee6050>}
InsertOpenAndCloseOps rewriting lineitem1
InsertOpenAndCloseOps rewriting by_quantity_1
False
{<conclave.dag.Concat object at 0x7f9416ee6050>}
InsertOpenAndCloseOps rewriting lineitem
InsertOpenAndCloseOps rewriting by_quantity_obl
True
{<conclave.dag.SortBy object at 0x7f9416ee6310>}
InsertOpenAndCloseOps rewriting sorted
True
set()
ExpandCompositeOps rewriting lineitem0
ExpandCompositeOps rewriting by_quantity_0
ExpandCompositeOps rewriting by_quantity_0_close
ExpandCompositeOps rewriting lineitem1
ExpandCompositeOps rewriting by_quantity_1
ExpandCompositeOps rewriting by_quantity_1_close
ExpandCompositeOps rewriting lineitem
ExpandCompositeOps rewriting by_quantity_obl
ExpandCompositeOps rewriting sorted
ExpandCompositeOps rewriting sorted_open
StoredWithSimplifier rewriting lineitem0
StoredWithSimplifier rewriting by_quantity_0
StoredWithSimplifier rewriting by_quantity_0_close
StoredWithSimplifier rewriting lineitem1
StoredWithSimplifier rewriting by_quantity_1
StoredWithSimplifier rewriting by_quantity_1_close
StoredWithSimplifier rewriting lineitem
StoredWithSimplifier rewriting by_quantity_obl
StoredWithSimplifier rewriting sorted
StoredWithSimplifier rewriting sorted_open
EliminateSorts rewriting lineitem0
EliminateSorts rewriting by_quantity_0
EliminateSorts rewriting by_quantity_0_close
EliminateSorts rewriting lineitem1
EliminateSorts rewriting by_quantity_1
EliminateSorts rewriting by_quantity_1_close
EliminateSorts rewriting lineitem
EliminateSorts rewriting by_quantity_obl
EliminateSorts rewriting sorted
EliminateSorts rewriting sorted_open
##################
CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}

##################
python {1} CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}

python {2} CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}

obliv-c {1, 2} CREATE RELATION by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}
start python
Will write to /home/cc/conclave/demo/tpch_two/1GB/by_quantity_1.csv
done python
start python
Will write to /home/cc/conclave/demo/tpch_one/1GB/by_quantity_0.csv
done python
Connecting to localhost on port 1234 ...
Connecting to localhost on port 1234 ...

0 python
1 python
2 obliv-c
Will connect to 1 at 0.0.0.0:9001
Missing Jiff config 

Skipping other party's job:  <conclave.job.PythonJob object at 0x7f9416ecef50>
example-python-job-1: /home/cc/conclave/demo/tpch_two/1GB/example-python-job-1/workflow.py running
Dispatching as Evaluator.

done msg received DoneMsg(1)
Obliv-C DoneMsg received.

***

Writing header file here /home/cc/conclave/demo/tpch_two/1GB/example-oblivc-job-2

***
example-oblivc-job-2: /home/cc/conclave/demo/tpch_two/1GB/example-oblivc-job-2/bash.sh dispatching Obliv-C job. 

0 python
1 python
2 obliv-c
Will wait for 2 to connect
iam msg received IAMMsg(2)
Missing Jiff config 

example-python-job-0: /home/cc/conclave/demo/tpch_one/1GB/example-python-job-0/workflow.py running
Skipping other party's job:  <conclave.job.PythonJob object at 0x7f9416e73f10>
Dispatching as Garbler.

***

Writing header file here /home/cc/conclave/demo/tpch_one/1GB/example-oblivc-job-2

***
example-oblivc-job-2: /home/cc/conclave/demo/tpch_one/1GB/example-oblivc-job-2/bash.sh dispatching Obliv-C job. 
took 59.77486354904249 seconds to run MPC
{'user_config': {'pid': 1, 'leaky_ops': 0, 'use_floats': 0, 'workflow_name': 'example', 'all_pids': [1, 2], 'paths': {'input_path': '/home/cc/conclave/demo/tpch_one/1GB'}}, 'net': {'parties': [{'port': 9001, 'host': '0.0.0.0'}, {'port': 9002, 'host': '0.0.0.0'}]}, 'backends': {'oblivc': {'ip_port': 'localhost:1234', 'available': 1, 'party_count': '2', 'oc_path': '/home/cc/obliv-c/bin/oblivcc'}}}
MPCPushDown rewriting lineitem0
MPCPushDown rewriting lineitem1
MPCPushDown rewriting lineitem
MPCPushDown rewriting by_quantity
MPCPushDown rewriting sorted
UpdateColumns rewriting lineitem0
UpdateColumns rewriting by_quantity_0
UpdateColumns rewriting lineitem1
UpdateColumns rewriting by_quantity_1
UpdateColumns rewriting lineitem
UpdateColumns rewriting by_quantity_obl
UpdateColumns rewriting sorted
MPCPushUp rewriting sorted
MPCPushUp rewriting by_quantity_obl
MPCPushUp rewriting lineitem
MPCPushUp rewriting by_quantity_1
MPCPushUp rewriting lineitem1
MPCPushUp rewriting by_quantity_0
MPCPushUp rewriting lineitem0
TrustSetPropDown rewriting lineitem0
TrustSetPropDown rewriting by_quantity_0
TrustSetPropDown rewriting lineitem1
TrustSetPropDown rewriting by_quantity_1
TrustSetPropDown rewriting lineitem
TrustSetPropDown rewriting by_quantity_obl
TrustSetPropDown rewriting sorted
HybridOperatorOpt rewriting lineitem0
HybridOperatorOpt rewriting by_quantity_0
HybridOperatorOpt rewriting lineitem1
HybridOperatorOpt rewriting by_quantity_1
HybridOperatorOpt rewriting lineitem
HybridOperatorOpt rewriting by_quantity_obl
HybridOperatorOpt rewriting sorted
InsertOpenAndCloseOps rewriting lineitem0
InsertOpenAndCloseOps rewriting by_quantity_0
False
{<conclave.dag.Concat object at 0x7f9416edf910>}
InsertOpenAndCloseOps rewriting lineitem1
InsertOpenAndCloseOps rewriting by_quantity_1
False
{<conclave.dag.Concat object at 0x7f9416edf910>}
InsertOpenAndCloseOps rewriting lineitem
InsertOpenAndCloseOps rewriting by_quantity_obl
True
{<conclave.dag.SortBy object at 0x7f9416edfc90>}
InsertOpenAndCloseOps rewriting sorted
True
set()
ExpandCompositeOps rewriting lineitem0
ExpandCompositeOps rewriting by_quantity_0
ExpandCompositeOps rewriting by_quantity_0_close
ExpandCompositeOps rewriting lineitem1
ExpandCompositeOps rewriting by_quantity_1
ExpandCompositeOps rewriting by_quantity_1_close
ExpandCompositeOps rewriting lineitem
ExpandCompositeOps rewriting by_quantity_obl
ExpandCompositeOps rewriting sorted
ExpandCompositeOps rewriting sorted_open
StoredWithSimplifier rewriting lineitem0
StoredWithSimplifier rewriting by_quantity_0
StoredWithSimplifier rewriting by_quantity_0_close
StoredWithSimplifier rewriting lineitem1
StoredWithSimplifier rewriting by_quantity_1
StoredWithSimplifier rewriting by_quantity_1_close
StoredWithSimplifier rewriting lineitem
StoredWithSimplifier rewriting by_quantity_obl
StoredWithSimplifier rewriting sorted
StoredWithSimplifier rewriting sorted_open
EliminateSorts rewriting lineitem0
EliminateSorts rewriting by_quantity_0
EliminateSorts rewriting by_quantity_0_close
EliminateSorts rewriting lineitem1
EliminateSorts rewriting by_quantity_1
EliminateSorts rewriting by_quantity_1_close
EliminateSorts rewriting lineitem
EliminateSorts rewriting by_quantity_obl
EliminateSorts rewriting sorted
EliminateSorts rewriting sorted_open
##################
CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}

##################
python {1} CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}

python {2} CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}

obliv-c {1, 2} CREATE RELATION by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}
MPCPushDown rewriting lineitem0
MPCPushDown rewriting lineitem1
MPCPushDown rewriting lineitem
MPCPushDown rewriting by_quantity
MPCPushDown rewriting sorted
UpdateColumns rewriting lineitem0
UpdateColumns rewriting by_quantity_0
UpdateColumns rewriting lineitem1
UpdateColumns rewriting by_quantity_1
UpdateColumns rewriting lineitem
UpdateColumns rewriting by_quantity_obl
UpdateColumns rewriting sorted
MPCPushUp rewriting sorted
MPCPushUp rewriting by_quantity_obl
MPCPushUp rewriting lineitem
MPCPushUp rewriting by_quantity_1
MPCPushUp rewriting lineitem1
MPCPushUp rewriting by_quantity_0
MPCPushUp rewriting lineitem0
TrustSetPropDown rewriting lineitem0
TrustSetPropDown rewriting by_quantity_0
TrustSetPropDown rewriting lineitem1
TrustSetPropDown rewriting by_quantity_1
TrustSetPropDown rewriting lineitem
TrustSetPropDown rewriting by_quantity_obl
TrustSetPropDown rewriting sorted
HybridOperatorOpt rewriting lineitem0
HybridOperatorOpt rewriting by_quantity_0
HybridOperatorOpt rewriting lineitem1
HybridOperatorOpt rewriting by_quantity_1
HybridOperatorOpt rewriting lineitem
HybridOperatorOpt rewriting by_quantity_obl
HybridOperatorOpt rewriting sorted
InsertOpenAndCloseOps rewriting lineitem0
InsertOpenAndCloseOps rewriting by_quantity_0
False
{<conclave.dag.Concat object at 0x7f9416edf890>}
InsertOpenAndCloseOps rewriting lineitem1
InsertOpenAndCloseOps rewriting by_quantity_1
False
{<conclave.dag.Concat object at 0x7f9416edf890>}
InsertOpenAndCloseOps rewriting lineitem
InsertOpenAndCloseOps rewriting by_quantity_obl
True
{<conclave.dag.SortBy object at 0x7f9416e781d0>}
InsertOpenAndCloseOps rewriting sorted
True
set()
ExpandCompositeOps rewriting lineitem0
ExpandCompositeOps rewriting by_quantity_0
ExpandCompositeOps rewriting by_quantity_0_close
ExpandCompositeOps rewriting lineitem1
ExpandCompositeOps rewriting by_quantity_1
ExpandCompositeOps rewriting by_quantity_1_close
ExpandCompositeOps rewriting lineitem
ExpandCompositeOps rewriting by_quantity_obl
ExpandCompositeOps rewriting sorted
ExpandCompositeOps rewriting sorted_open
StoredWithSimplifier rewriting lineitem0
StoredWithSimplifier rewriting by_quantity_0
StoredWithSimplifier rewriting by_quantity_0_close
StoredWithSimplifier rewriting lineitem1
StoredWithSimplifier rewriting by_quantity_1
StoredWithSimplifier rewriting by_quantity_1_close
StoredWithSimplifier rewriting lineitem
StoredWithSimplifier rewriting by_quantity_obl
StoredWithSimplifier rewriting sorted
StoredWithSimplifier rewriting sorted_open
EliminateSorts rewriting lineitem0
EliminateSorts rewriting by_quantity_0
EliminateSorts rewriting by_quantity_0_close
EliminateSorts rewriting lineitem1
EliminateSorts rewriting by_quantity_1
EliminateSorts rewriting by_quantity_1_close
EliminateSorts rewriting lineitem
EliminateSorts rewriting by_quantity_obl
EliminateSorts rewriting sorted
EliminateSorts rewriting sorted_open
##################
CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}

##################
python {1} CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}

python {2} CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}

obliv-c {1, 2} CREATE RELATION by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}
start python
Will write to /home/cc/conclave/demo/tpch_one/1GB/by_quantity_0.csv
done python
start python
Will write to /home/cc/conclave/demo/tpch_two/1GB/by_quantity_1.csv
done python
Connecting to localhost on port 1234 ...
Connecting to localhost on port 1234 ...

0 python
1 python
2 obliv-c
Will connect to 1 at 0.0.0.0:9001
Missing Jiff config 

Skipping other party's job:  <conclave.job.PythonJob object at 0x7f9416edf250>
example-python-job-1: /home/cc/conclave/demo/tpch_two/1GB/example-python-job-1/workflow.py running
Dispatching as Evaluator.

done msg received DoneMsg(1)
Obliv-C DoneMsg received.

***

Writing header file here /home/cc/conclave/demo/tpch_two/1GB/example-oblivc-job-2

***
example-oblivc-job-2: /home/cc/conclave/demo/tpch_two/1GB/example-oblivc-job-2/bash.sh dispatching Obliv-C job. 

0 python
1 python
2 obliv-c
Will wait for 2 to connect
iam msg received IAMMsg(2)
Missing Jiff config 

example-python-job-0: /home/cc/conclave/demo/tpch_one/1GB/example-python-job-0/workflow.py running
Skipping other party's job:  <conclave.job.PythonJob object at 0x7f9416e78390>
Dispatching as Garbler.

***

Writing header file here /home/cc/conclave/demo/tpch_one/1GB/example-oblivc-job-2

***
example-oblivc-job-2: /home/cc/conclave/demo/tpch_one/1GB/example-oblivc-job-2/bash.sh dispatching Obliv-C job. 
took 61.43460352392867 seconds to run MPC
{'user_config': {'pid': 1, 'leaky_ops': 0, 'use_floats': 0, 'workflow_name': 'example', 'all_pids': [1, 2], 'paths': {'input_path': '/home/cc/conclave/demo/tpch_one/1GB'}}, 'net': {'parties': [{'port': 9001, 'host': '0.0.0.0'}, {'port': 9002, 'host': '0.0.0.0'}]}, 'backends': {'oblivc': {'ip_port': 'localhost:1234', 'available': 1, 'party_count': '2', 'oc_path': '/home/cc/obliv-c/bin/oblivcc'}}}
MPCPushDown rewriting lineitem0
MPCPushDown rewriting lineitem1
MPCPushDown rewriting lineitem
MPCPushDown rewriting by_quantity
MPCPushDown rewriting sorted
UpdateColumns rewriting lineitem0
UpdateColumns rewriting by_quantity_0
UpdateColumns rewriting lineitem1
UpdateColumns rewriting by_quantity_1
UpdateColumns rewriting lineitem
UpdateColumns rewriting by_quantity_obl
UpdateColumns rewriting sorted
MPCPushUp rewriting sorted
MPCPushUp rewriting by_quantity_obl
MPCPushUp rewriting lineitem
MPCPushUp rewriting by_quantity_1
MPCPushUp rewriting lineitem1
MPCPushUp rewriting by_quantity_0
MPCPushUp rewriting lineitem0
TrustSetPropDown rewriting lineitem0
TrustSetPropDown rewriting by_quantity_0
TrustSetPropDown rewriting lineitem1
TrustSetPropDown rewriting by_quantity_1
TrustSetPropDown rewriting lineitem
TrustSetPropDown rewriting by_quantity_obl
TrustSetPropDown rewriting sorted
HybridOperatorOpt rewriting lineitem0
HybridOperatorOpt rewriting by_quantity_0
HybridOperatorOpt rewriting lineitem1
HybridOperatorOpt rewriting by_quantity_1
HybridOperatorOpt rewriting lineitem
HybridOperatorOpt rewriting by_quantity_obl
HybridOperatorOpt rewriting sorted
InsertOpenAndCloseOps rewriting lineitem0
InsertOpenAndCloseOps rewriting by_quantity_0
False
{<conclave.dag.Concat object at 0x7f9416eef110>}
InsertOpenAndCloseOps rewriting lineitem1
InsertOpenAndCloseOps rewriting by_quantity_1
False
{<conclave.dag.Concat object at 0x7f9416eef110>}
InsertOpenAndCloseOps rewriting lineitem
InsertOpenAndCloseOps rewriting by_quantity_obl
True
{<conclave.dag.SortBy object at 0x7f9416eefed0>}
InsertOpenAndCloseOps rewriting sorted
True
set()
ExpandCompositeOps rewriting lineitem0
ExpandCompositeOps rewriting by_quantity_0
ExpandCompositeOps rewriting by_quantity_0_close
ExpandCompositeOps rewriting lineitem1
ExpandCompositeOps rewriting by_quantity_1
ExpandCompositeOps rewriting by_quantity_1_close
ExpandCompositeOps rewriting lineitem
ExpandCompositeOps rewriting by_quantity_obl
ExpandCompositeOps rewriting sorted
ExpandCompositeOps rewriting sorted_open
StoredWithSimplifier rewriting lineitem0
StoredWithSimplifier rewriting by_quantity_0
StoredWithSimplifier rewriting by_quantity_0_close
StoredWithSimplifier rewriting lineitem1
StoredWithSimplifier rewriting by_quantity_1
StoredWithSimplifier rewriting by_quantity_1_close
StoredWithSimplifier rewriting lineitem
StoredWithSimplifier rewriting by_quantity_obl
StoredWithSimplifier rewriting sorted
StoredWithSimplifier rewriting sorted_open
EliminateSorts rewriting lineitem0
EliminateSorts rewriting by_quantity_0
EliminateSorts rewriting by_quantity_0_close
EliminateSorts rewriting lineitem1
EliminateSorts rewriting by_quantity_1
EliminateSorts rewriting by_quantity_1_close
EliminateSorts rewriting lineitem
EliminateSorts rewriting by_quantity_obl
EliminateSorts rewriting sorted
EliminateSorts rewriting sorted_open
##################
CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}

##################
python {1} CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}

python {2} CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}

obliv-c {1, 2} CREATE RELATION by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}
MPCPushDown rewriting lineitem0
MPCPushDown rewriting lineitem1
MPCPushDown rewriting lineitem
MPCPushDown rewriting by_quantity
MPCPushDown rewriting sorted
UpdateColumns rewriting lineitem0
UpdateColumns rewriting by_quantity_0
UpdateColumns rewriting lineitem1
UpdateColumns rewriting by_quantity_1
UpdateColumns rewriting lineitem
UpdateColumns rewriting by_quantity_obl
UpdateColumns rewriting sorted
MPCPushUp rewriting sorted
MPCPushUp rewriting by_quantity_obl
MPCPushUp rewriting lineitem
MPCPushUp rewriting by_quantity_1
MPCPushUp rewriting lineitem1
MPCPushUp rewriting by_quantity_0
MPCPushUp rewriting lineitem0
TrustSetPropDown rewriting lineitem0
TrustSetPropDown rewriting by_quantity_0
TrustSetPropDown rewriting lineitem1
TrustSetPropDown rewriting by_quantity_1
TrustSetPropDown rewriting lineitem
TrustSetPropDown rewriting by_quantity_obl
TrustSetPropDown rewriting sorted
HybridOperatorOpt rewriting lineitem0
HybridOperatorOpt rewriting by_quantity_0
HybridOperatorOpt rewriting lineitem1
HybridOperatorOpt rewriting by_quantity_1
HybridOperatorOpt rewriting lineitem
HybridOperatorOpt rewriting by_quantity_obl
HybridOperatorOpt rewriting sorted
InsertOpenAndCloseOps rewriting lineitem0
InsertOpenAndCloseOps rewriting by_quantity_0
False
{<conclave.dag.Concat object at 0x7f9416eefd10>}
InsertOpenAndCloseOps rewriting lineitem1
InsertOpenAndCloseOps rewriting by_quantity_1
False
{<conclave.dag.Concat object at 0x7f9416eefd10>}
InsertOpenAndCloseOps rewriting lineitem
InsertOpenAndCloseOps rewriting by_quantity_obl
True
{<conclave.dag.SortBy object at 0x7f9416e855d0>}
InsertOpenAndCloseOps rewriting sorted
True
set()
ExpandCompositeOps rewriting lineitem0
ExpandCompositeOps rewriting by_quantity_0
ExpandCompositeOps rewriting by_quantity_0_close
ExpandCompositeOps rewriting lineitem1
ExpandCompositeOps rewriting by_quantity_1
ExpandCompositeOps rewriting by_quantity_1_close
ExpandCompositeOps rewriting lineitem
ExpandCompositeOps rewriting by_quantity_obl
ExpandCompositeOps rewriting sorted
ExpandCompositeOps rewriting sorted_open
StoredWithSimplifier rewriting lineitem0
StoredWithSimplifier rewriting by_quantity_0
StoredWithSimplifier rewriting by_quantity_0_close
StoredWithSimplifier rewriting lineitem1
StoredWithSimplifier rewriting by_quantity_1
StoredWithSimplifier rewriting by_quantity_1_close
StoredWithSimplifier rewriting lineitem
StoredWithSimplifier rewriting by_quantity_obl
StoredWithSimplifier rewriting sorted
StoredWithSimplifier rewriting sorted_open
EliminateSorts rewriting lineitem0
EliminateSorts rewriting by_quantity_0
EliminateSorts rewriting by_quantity_0_close
EliminateSorts rewriting lineitem1
EliminateSorts rewriting by_quantity_1
EliminateSorts rewriting by_quantity_1_close
EliminateSorts rewriting lineitem
EliminateSorts rewriting by_quantity_obl
EliminateSorts rewriting sorted
EliminateSorts rewriting sorted_open
##################
CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}

##################
python {1} CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}

python {2} CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}

obliv-c {1, 2} CREATE RELATION by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}
start python
Will write to /home/cc/conclave/demo/tpch_two/1GB/by_quantity_1.csv
done python
start python
Will write to /home/cc/conclave/demo/tpch_one/1GB/by_quantity_0.csv
done python
Connecting to localhost on port 1234 ...
Connecting to localhost on port 1234 ...

0 python
1 python
2 obliv-c
Will wait for 2 to connect
iam msg received IAMMsg(2)
Missing Jiff config 

example-python-job-0: /home/cc/conclave/demo/tpch_one/1GB/example-python-job-0/workflow.py running
Skipping other party's job:  <conclave.job.PythonJob object at 0x7f9416e85910>
Dispatching as Garbler.

***

Writing header file here /home/cc/conclave/demo/tpch_one/1GB/example-oblivc-job-2

***
example-oblivc-job-2: /home/cc/conclave/demo/tpch_one/1GB/example-oblivc-job-2/bash.sh dispatching Obliv-C job. 
took 60.300264863995835 seconds to run MPC

0 python
1 python
2 obliv-c
Will connect to 1 at 0.0.0.0:9001
Missing Jiff config 

Skipping other party's job:  <conclave.job.PythonJob object at 0x7f9416eeffd0>
example-python-job-1: /home/cc/conclave/demo/tpch_two/1GB/example-python-job-1/workflow.py running
Dispatching as Evaluator.

done msg received DoneMsg(1)
Obliv-C DoneMsg received.

***

Writing header file here /home/cc/conclave/demo/tpch_two/1GB/example-oblivc-job-2

***
example-oblivc-job-2: /home/cc/conclave/demo/tpch_two/1GB/example-oblivc-job-2/bash.sh dispatching Obliv-C job. 
