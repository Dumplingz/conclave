{'backends': {'oblivc': {'party_count': '2', 'ip_port': 'localhost:1234', 'available': 1, 'oc_path': '/home/cc/obliv-c/bin/oblivcc'}}, 'user_config': {'workflow_name': 'example', 'leaky_ops': 0, 'pid': 1, 'all_pids': [1, 2], 'use_floats': 0, 'paths': {'input_path': '/home/cc/conclave/demo/tpch_one/100MB'}}, 'net': {'parties': [{'port': 9001, 'host': '0.0.0.0'}, {'port': 9002, 'host': '0.0.0.0'}]}}
MPCPushDown rewriting lineitem0
MPCPushDown rewriting lineitem1
MPCPushDown rewriting lineitem
MPCPushDown rewriting by_quantity
MPCPushDown rewriting sorted
UpdateColumns rewriting lineitem0
UpdateColumns rewriting by_quantity_0
UpdateColumns rewriting lineitem1
UpdateColumns rewriting by_quantity_1
UpdateColumns rewriting lineitem
UpdateColumns rewriting by_quantity_obl
UpdateColumns rewriting sorted
MPCPushUp rewriting sorted
MPCPushUp rewriting by_quantity_obl
MPCPushUp rewriting lineitem
MPCPushUp rewriting by_quantity_1
MPCPushUp rewriting lineitem1
MPCPushUp rewriting by_quantity_0
MPCPushUp rewriting lineitem0
TrustSetPropDown rewriting lineitem0
TrustSetPropDown rewriting by_quantity_0
TrustSetPropDown rewriting lineitem1
TrustSetPropDown rewriting by_quantity_1
TrustSetPropDown rewriting lineitem
TrustSetPropDown rewriting by_quantity_obl
TrustSetPropDown rewriting sorted
HybridOperatorOpt rewriting lineitem0
HybridOperatorOpt rewriting by_quantity_0
HybridOperatorOpt rewriting lineitem1
HybridOperatorOpt rewriting by_quantity_1
HybridOperatorOpt rewriting lineitem
HybridOperatorOpt rewriting by_quantity_obl
HybridOperatorOpt rewriting sorted
InsertOpenAndCloseOps rewriting lineitem0
InsertOpenAndCloseOps rewriting by_quantity_0
False
{<conclave.dag.Concat object at 0x7f9f32195190>}
InsertOpenAndCloseOps rewriting lineitem1
InsertOpenAndCloseOps rewriting by_quantity_1
False
{<conclave.dag.Concat object at 0x7f9f32195190>}
InsertOpenAndCloseOps rewriting lineitem
InsertOpenAndCloseOps rewriting by_quantity_obl
True
{<conclave.dag.SortBy object at 0x7f9f32195450>}
InsertOpenAndCloseOps rewriting sorted
True
set()
ExpandCompositeOps rewriting lineitem0
ExpandCompositeOps rewriting by_quantity_0
ExpandCompositeOps rewriting by_quantity_0_close
ExpandCompositeOps rewriting lineitem1
ExpandCompositeOps rewriting by_quantity_1
ExpandCompositeOps rewriting by_quantity_1_close
ExpandCompositeOps rewriting lineitem
ExpandCompositeOps rewriting by_quantity_obl
ExpandCompositeOps rewriting sorted
ExpandCompositeOps rewriting sorted_open
StoredWithSimplifier rewriting lineitem0
StoredWithSimplifier rewriting by_quantity_0
StoredWithSimplifier rewriting by_quantity_0_close
StoredWithSimplifier rewriting lineitem1
StoredWithSimplifier rewriting by_quantity_1
StoredWithSimplifier rewriting by_quantity_1_close
StoredWithSimplifier rewriting lineitem
StoredWithSimplifier rewriting by_quantity_obl
StoredWithSimplifier rewriting sorted
StoredWithSimplifier rewriting sorted_open
EliminateSorts rewriting lineitem0
EliminateSorts rewriting by_quantity_0
EliminateSorts rewriting by_quantity_0_close
EliminateSorts rewriting lineitem1
EliminateSorts rewriting by_quantity_1
EliminateSorts rewriting by_quantity_1_close
EliminateSorts rewriting lineitem
EliminateSorts rewriting by_quantity_obl
EliminateSorts rewriting sorted
EliminateSorts rewriting sorted_open
##################
CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}

##################
python {1} CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}

python {2} CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}

obliv-c {1, 2} CREATE RELATION by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}
MPCPushDown rewriting lineitem0
MPCPushDown rewriting lineitem1
MPCPushDown rewriting lineitem
MPCPushDown rewriting by_quantity
MPCPushDown rewriting sorted
UpdateColumns rewriting lineitem0
UpdateColumns rewriting by_quantity_0
UpdateColumns rewriting lineitem1
UpdateColumns rewriting by_quantity_1
UpdateColumns rewriting lineitem
UpdateColumns rewriting by_quantity_obl
UpdateColumns rewriting sorted
MPCPushUp rewriting sorted
MPCPushUp rewriting by_quantity_obl
MPCPushUp rewriting lineitem
MPCPushUp rewriting by_quantity_1
MPCPushUp rewriting lineitem1
MPCPushUp rewriting by_quantity_0
MPCPushUp rewriting lineitem0
TrustSetPropDown rewriting lineitem0
TrustSetPropDown rewriting by_quantity_0
TrustSetPropDown rewriting lineitem1
TrustSetPropDown rewriting by_quantity_1
TrustSetPropDown rewriting lineitem
TrustSetPropDown rewriting by_quantity_obl
TrustSetPropDown rewriting sorted
HybridOperatorOpt rewriting lineitem0
HybridOperatorOpt rewriting by_quantity_0
HybridOperatorOpt rewriting lineitem1
HybridOperatorOpt rewriting by_quantity_1
HybridOperatorOpt rewriting lineitem
HybridOperatorOpt rewriting by_quantity_obl
HybridOperatorOpt rewriting sorted
InsertOpenAndCloseOps rewriting lineitem0
InsertOpenAndCloseOps rewriting by_quantity_0
False
{<conclave.dag.Concat object at 0x7f9f32196210>}
InsertOpenAndCloseOps rewriting lineitem1
InsertOpenAndCloseOps rewriting by_quantity_1
False
{<conclave.dag.Concat object at 0x7f9f32196210>}
InsertOpenAndCloseOps rewriting lineitem
InsertOpenAndCloseOps rewriting by_quantity_obl
True
{<conclave.dag.SortBy object at 0x7f9f321964d0>}
InsertOpenAndCloseOps rewriting sorted
True
set()
ExpandCompositeOps rewriting lineitem0
ExpandCompositeOps rewriting by_quantity_0
ExpandCompositeOps rewriting by_quantity_0_close
ExpandCompositeOps rewriting lineitem1
ExpandCompositeOps rewriting by_quantity_1
ExpandCompositeOps rewriting by_quantity_1_close
ExpandCompositeOps rewriting lineitem
ExpandCompositeOps rewriting by_quantity_obl
ExpandCompositeOps rewriting sorted
ExpandCompositeOps rewriting sorted_open
StoredWithSimplifier rewriting lineitem0
StoredWithSimplifier rewriting by_quantity_0
StoredWithSimplifier rewriting by_quantity_0_close
StoredWithSimplifier rewriting lineitem1
StoredWithSimplifier rewriting by_quantity_1
StoredWithSimplifier rewriting by_quantity_1_close
StoredWithSimplifier rewriting lineitem
StoredWithSimplifier rewriting by_quantity_obl
StoredWithSimplifier rewriting sorted
StoredWithSimplifier rewriting sorted_open
EliminateSorts rewriting lineitem0
EliminateSorts rewriting by_quantity_0
EliminateSorts rewriting by_quantity_0_close
EliminateSorts rewriting lineitem1
EliminateSorts rewriting by_quantity_1
EliminateSorts rewriting by_quantity_1_close
EliminateSorts rewriting lineitem
EliminateSorts rewriting by_quantity_obl
EliminateSorts rewriting sorted
EliminateSorts rewriting sorted_open
##################
CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}

##################
python {1} CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}

python {2} CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}

obliv-c {1, 2} CREATE RELATION by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}
start python
Will write to /home/cc/conclave/demo/tpch_two/100MB/by_quantity_1.csv
done python
start python
Will write to /home/cc/conclave/demo/tpch_one/100MB/by_quantity_0.csv
done python
Connecting to localhost on port 1234 ...
Connecting to localhost on port 1234 ...

0 python
1 python
2 obliv-c
Will connect to 1 at 0.0.0.0:9001
Missing Jiff config 

Skipping other party's job:  <conclave.job.PythonJob object at 0x7f9f321a4350>
example-python-job-1: /home/cc/conclave/demo/tpch_two/100MB/example-python-job-1/workflow.py running
Dispatching as Evaluator.

done msg received DoneMsg(1)
Obliv-C DoneMsg received.

***

Writing header file here /home/cc/conclave/demo/tpch_two/100MB/example-oblivc-job-2

***
example-oblivc-job-2: /home/cc/conclave/demo/tpch_two/100MB/example-oblivc-job-2/bash.sh dispatching Obliv-C job. 

0 python
1 python
2 obliv-c
Will wait for 2 to connect
iam msg received IAMMsg(2)
Missing Jiff config 

example-python-job-0: /home/cc/conclave/demo/tpch_one/100MB/example-python-job-0/workflow.py running
Skipping other party's job:  <conclave.job.PythonJob object at 0x7f9f32195310>
Dispatching as Garbler.

***

Writing header file here /home/cc/conclave/demo/tpch_one/100MB/example-oblivc-job-2

***
example-oblivc-job-2: /home/cc/conclave/demo/tpch_one/100MB/example-oblivc-job-2/bash.sh dispatching Obliv-C job. 
took 19.64693905506283 seconds to run MPC
{'backends': {'oblivc': {'party_count': '2', 'ip_port': 'localhost:1234', 'available': 1, 'oc_path': '/home/cc/obliv-c/bin/oblivcc'}}, 'user_config': {'workflow_name': 'example', 'leaky_ops': 0, 'pid': 1, 'all_pids': [1, 2], 'use_floats': 0, 'paths': {'input_path': '/home/cc/conclave/demo/tpch_one/100MB'}}, 'net': {'parties': [{'port': 9001, 'host': '0.0.0.0'}, {'port': 9002, 'host': '0.0.0.0'}]}}
MPCPushDown rewriting lineitem0
MPCPushDown rewriting lineitem1
MPCPushDown rewriting lineitem
MPCPushDown rewriting by_quantity
MPCPushDown rewriting sorted
UpdateColumns rewriting lineitem0
UpdateColumns rewriting by_quantity_0
UpdateColumns rewriting lineitem1
UpdateColumns rewriting by_quantity_1
UpdateColumns rewriting lineitem
UpdateColumns rewriting by_quantity_obl
UpdateColumns rewriting sorted
MPCPushUp rewriting sorted
MPCPushUp rewriting by_quantity_obl
MPCPushUp rewriting lineitem
MPCPushUp rewriting by_quantity_1
MPCPushUp rewriting lineitem1
MPCPushUp rewriting by_quantity_0
MPCPushUp rewriting lineitem0
TrustSetPropDown rewriting lineitem0
TrustSetPropDown rewriting by_quantity_0
TrustSetPropDown rewriting lineitem1
TrustSetPropDown rewriting by_quantity_1
TrustSetPropDown rewriting lineitem
TrustSetPropDown rewriting by_quantity_obl
TrustSetPropDown rewriting sorted
HybridOperatorOpt rewriting lineitem0
HybridOperatorOpt rewriting by_quantity_0
HybridOperatorOpt rewriting lineitem1
HybridOperatorOpt rewriting by_quantity_1
HybridOperatorOpt rewriting lineitem
HybridOperatorOpt rewriting by_quantity_obl
HybridOperatorOpt rewriting sorted
InsertOpenAndCloseOps rewriting lineitem0
InsertOpenAndCloseOps rewriting by_quantity_0
False
{<conclave.dag.Concat object at 0x7f9f321619d0>}
InsertOpenAndCloseOps rewriting lineitem1
InsertOpenAndCloseOps rewriting by_quantity_1
False
{<conclave.dag.Concat object at 0x7f9f321619d0>}
InsertOpenAndCloseOps rewriting lineitem
InsertOpenAndCloseOps rewriting by_quantity_obl
True
{<conclave.dag.SortBy object at 0x7f9f32161bd0>}
InsertOpenAndCloseOps rewriting sorted
True
set()
ExpandCompositeOps rewriting lineitem0
ExpandCompositeOps rewriting by_quantity_0
ExpandCompositeOps rewriting by_quantity_0_close
ExpandCompositeOps rewriting lineitem1
ExpandCompositeOps rewriting by_quantity_1
ExpandCompositeOps rewriting by_quantity_1_close
ExpandCompositeOps rewriting lineitem
ExpandCompositeOps rewriting by_quantity_obl
ExpandCompositeOps rewriting sorted
ExpandCompositeOps rewriting sorted_open
StoredWithSimplifier rewriting lineitem0
StoredWithSimplifier rewriting by_quantity_0
StoredWithSimplifier rewriting by_quantity_0_close
StoredWithSimplifier rewriting lineitem1
StoredWithSimplifier rewriting by_quantity_1
StoredWithSimplifier rewriting by_quantity_1_close
StoredWithSimplifier rewriting lineitem
StoredWithSimplifier rewriting by_quantity_obl
StoredWithSimplifier rewriting sorted
StoredWithSimplifier rewriting sorted_open
EliminateSorts rewriting lineitem0
EliminateSorts rewriting by_quantity_0
EliminateSorts rewriting by_quantity_0_close
EliminateSorts rewriting lineitem1
EliminateSorts rewriting by_quantity_1
EliminateSorts rewriting by_quantity_1_close
EliminateSorts rewriting lineitem
EliminateSorts rewriting by_quantity_obl
EliminateSorts rewriting sorted
EliminateSorts rewriting sorted_open
##################
CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}

##################
python {1} CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}

python {2} CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}

obliv-c {1, 2} CREATE RELATION by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}
MPCPushDown rewriting lineitem0
MPCPushDown rewriting lineitem1
MPCPushDown rewriting lineitem
MPCPushDown rewriting by_quantity
MPCPushDown rewriting sorted
UpdateColumns rewriting lineitem0
UpdateColumns rewriting by_quantity_0
UpdateColumns rewriting lineitem1
UpdateColumns rewriting by_quantity_1
UpdateColumns rewriting lineitem
UpdateColumns rewriting by_quantity_obl
UpdateColumns rewriting sorted
MPCPushUp rewriting sorted
MPCPushUp rewriting by_quantity_obl
MPCPushUp rewriting lineitem
MPCPushUp rewriting by_quantity_1
MPCPushUp rewriting lineitem1
MPCPushUp rewriting by_quantity_0
MPCPushUp rewriting lineitem0
TrustSetPropDown rewriting lineitem0
TrustSetPropDown rewriting by_quantity_0
TrustSetPropDown rewriting lineitem1
TrustSetPropDown rewriting by_quantity_1
TrustSetPropDown rewriting lineitem
TrustSetPropDown rewriting by_quantity_obl
TrustSetPropDown rewriting sorted
HybridOperatorOpt rewriting lineitem0
HybridOperatorOpt rewriting by_quantity_0
HybridOperatorOpt rewriting lineitem1
HybridOperatorOpt rewriting by_quantity_1
HybridOperatorOpt rewriting lineitem
HybridOperatorOpt rewriting by_quantity_obl
HybridOperatorOpt rewriting sorted
InsertOpenAndCloseOps rewriting lineitem0
InsertOpenAndCloseOps rewriting by_quantity_0
False
{<conclave.dag.Concat object at 0x7f9f3215fe50>}
InsertOpenAndCloseOps rewriting lineitem1
InsertOpenAndCloseOps rewriting by_quantity_1
False
{<conclave.dag.Concat object at 0x7f9f3215fe50>}
InsertOpenAndCloseOps rewriting lineitem
InsertOpenAndCloseOps rewriting by_quantity_obl
True
{<conclave.dag.SortBy object at 0x7f9f32164090>}
InsertOpenAndCloseOps rewriting sorted
True
set()
ExpandCompositeOps rewriting lineitem0
ExpandCompositeOps rewriting by_quantity_0
ExpandCompositeOps rewriting by_quantity_0_close
ExpandCompositeOps rewriting lineitem1
ExpandCompositeOps rewriting by_quantity_1
ExpandCompositeOps rewriting by_quantity_1_close
ExpandCompositeOps rewriting lineitem
ExpandCompositeOps rewriting by_quantity_obl
ExpandCompositeOps rewriting sorted
ExpandCompositeOps rewriting sorted_open
StoredWithSimplifier rewriting lineitem0
StoredWithSimplifier rewriting by_quantity_0
StoredWithSimplifier rewriting by_quantity_0_close
StoredWithSimplifier rewriting lineitem1
StoredWithSimplifier rewriting by_quantity_1
StoredWithSimplifier rewriting by_quantity_1_close
StoredWithSimplifier rewriting lineitem
StoredWithSimplifier rewriting by_quantity_obl
StoredWithSimplifier rewriting sorted
StoredWithSimplifier rewriting sorted_open
EliminateSorts rewriting lineitem0
EliminateSorts rewriting by_quantity_0
EliminateSorts rewriting by_quantity_0_close
EliminateSorts rewriting lineitem1
EliminateSorts rewriting by_quantity_1
EliminateSorts rewriting by_quantity_1_close
EliminateSorts rewriting lineitem
EliminateSorts rewriting by_quantity_obl
EliminateSorts rewriting sorted
EliminateSorts rewriting sorted_open
##################
CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}

##################
python {1} CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}

python {2} CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}

obliv-c {1, 2} CREATE RELATION by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}
start python
Will write to /home/cc/conclave/demo/tpch_two/100MB/by_quantity_1.csv
done python
start python
Will write to /home/cc/conclave/demo/tpch_one/100MB/by_quantity_0.csv
done python
Connecting to localhost on port 1234 ...
Connecting to localhost on port 1234 ...

0 python
1 python
2 obliv-c
Will connect to 1 at 0.0.0.0:9001
Missing Jiff config 

Skipping other party's job:  <conclave.job.PythonJob object at 0x7f9f3215ff50>
example-python-job-1: /home/cc/conclave/demo/tpch_two/100MB/example-python-job-1/workflow.py running
Dispatching as Evaluator.

done msg received DoneMsg(1)
Obliv-C DoneMsg received.

***

Writing header file here /home/cc/conclave/demo/tpch_two/100MB/example-oblivc-job-2

***
example-oblivc-job-2: /home/cc/conclave/demo/tpch_two/100MB/example-oblivc-job-2/bash.sh dispatching Obliv-C job. 

0 python
1 python
2 obliv-c
Will wait for 2 to connect
iam msg received IAMMsg(2)
Missing Jiff config 

example-python-job-0: /home/cc/conclave/demo/tpch_one/100MB/example-python-job-0/workflow.py running
Skipping other party's job:  <conclave.job.PythonJob object at 0x7f9f32161b10>
Dispatching as Garbler.

***

Writing header file here /home/cc/conclave/demo/tpch_one/100MB/example-oblivc-job-2

***
example-oblivc-job-2: /home/cc/conclave/demo/tpch_one/100MB/example-oblivc-job-2/bash.sh dispatching Obliv-C job. 
took 19.46060516196303 seconds to run MPC
{'backends': {'oblivc': {'party_count': '2', 'ip_port': 'localhost:1234', 'available': 1, 'oc_path': '/home/cc/obliv-c/bin/oblivcc'}}, 'user_config': {'workflow_name': 'example', 'leaky_ops': 0, 'pid': 1, 'all_pids': [1, 2], 'use_floats': 0, 'paths': {'input_path': '/home/cc/conclave/demo/tpch_one/100MB'}}, 'net': {'parties': [{'port': 9001, 'host': '0.0.0.0'}, {'port': 9002, 'host': '0.0.0.0'}]}}
MPCPushDown rewriting lineitem0
MPCPushDown rewriting lineitem1
MPCPushDown rewriting lineitem
MPCPushDown rewriting by_quantity
MPCPushDown rewriting sorted
UpdateColumns rewriting lineitem0
UpdateColumns rewriting by_quantity_0
UpdateColumns rewriting lineitem1
UpdateColumns rewriting by_quantity_1
UpdateColumns rewriting lineitem
UpdateColumns rewriting by_quantity_obl
UpdateColumns rewriting sorted
MPCPushUp rewriting sorted
MPCPushUp rewriting by_quantity_obl
MPCPushUp rewriting lineitem
MPCPushUp rewriting by_quantity_1
MPCPushUp rewriting lineitem1
MPCPushUp rewriting by_quantity_0
MPCPushUp rewriting lineitem0
TrustSetPropDown rewriting lineitem0
TrustSetPropDown rewriting by_quantity_0
TrustSetPropDown rewriting lineitem1
TrustSetPropDown rewriting by_quantity_1
TrustSetPropDown rewriting lineitem
TrustSetPropDown rewriting by_quantity_obl
TrustSetPropDown rewriting sorted
HybridOperatorOpt rewriting lineitem0
HybridOperatorOpt rewriting by_quantity_0
HybridOperatorOpt rewriting lineitem1
HybridOperatorOpt rewriting by_quantity_1
HybridOperatorOpt rewriting lineitem
HybridOperatorOpt rewriting by_quantity_obl
HybridOperatorOpt rewriting sorted
InsertOpenAndCloseOps rewriting lineitem0
InsertOpenAndCloseOps rewriting by_quantity_0
False
{<conclave.dag.Concat object at 0x7f9f32187a90>}
InsertOpenAndCloseOps rewriting lineitem1
InsertOpenAndCloseOps rewriting by_quantity_1
False
{<conclave.dag.Concat object at 0x7f9f32187a90>}
InsertOpenAndCloseOps rewriting lineitem
InsertOpenAndCloseOps rewriting by_quantity_obl
True
{<conclave.dag.SortBy object at 0x7f9f32195310>}
InsertOpenAndCloseOps rewriting sorted
True
set()
ExpandCompositeOps rewriting lineitem0
ExpandCompositeOps rewriting by_quantity_0
ExpandCompositeOps rewriting by_quantity_0_close
ExpandCompositeOps rewriting lineitem1
ExpandCompositeOps rewriting by_quantity_1
ExpandCompositeOps rewriting by_quantity_1_close
ExpandCompositeOps rewriting lineitem
ExpandCompositeOps rewriting by_quantity_obl
ExpandCompositeOps rewriting sorted
ExpandCompositeOps rewriting sorted_open
StoredWithSimplifier rewriting lineitem0
StoredWithSimplifier rewriting by_quantity_0
StoredWithSimplifier rewriting by_quantity_0_close
StoredWithSimplifier rewriting lineitem1
StoredWithSimplifier rewriting by_quantity_1
StoredWithSimplifier rewriting by_quantity_1_close
StoredWithSimplifier rewriting lineitem
StoredWithSimplifier rewriting by_quantity_obl
StoredWithSimplifier rewriting sorted
StoredWithSimplifier rewriting sorted_open
EliminateSorts rewriting lineitem0
EliminateSorts rewriting by_quantity_0
EliminateSorts rewriting by_quantity_0_close
EliminateSorts rewriting lineitem1
EliminateSorts rewriting by_quantity_1
EliminateSorts rewriting by_quantity_1_close
EliminateSorts rewriting lineitem
EliminateSorts rewriting by_quantity_obl
EliminateSorts rewriting sorted
EliminateSorts rewriting sorted_open
##################
CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}

##################
python {1} CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}

python {2} CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}

obliv-c {1, 2} CREATE RELATION by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}
MPCPushDown rewriting lineitem0
MPCPushDown rewriting lineitem1
MPCPushDown rewriting lineitem
MPCPushDown rewriting by_quantity
MPCPushDown rewriting sorted
UpdateColumns rewriting lineitem0
UpdateColumns rewriting by_quantity_0
UpdateColumns rewriting lineitem1
UpdateColumns rewriting by_quantity_1
UpdateColumns rewriting lineitem
UpdateColumns rewriting by_quantity_obl
UpdateColumns rewriting sorted
MPCPushUp rewriting sorted
MPCPushUp rewriting by_quantity_obl
MPCPushUp rewriting lineitem
MPCPushUp rewriting by_quantity_1
MPCPushUp rewriting lineitem1
MPCPushUp rewriting by_quantity_0
MPCPushUp rewriting lineitem0
TrustSetPropDown rewriting lineitem0
TrustSetPropDown rewriting by_quantity_0
TrustSetPropDown rewriting lineitem1
TrustSetPropDown rewriting by_quantity_1
TrustSetPropDown rewriting lineitem
TrustSetPropDown rewriting by_quantity_obl
TrustSetPropDown rewriting sorted
HybridOperatorOpt rewriting lineitem0
HybridOperatorOpt rewriting by_quantity_0
HybridOperatorOpt rewriting lineitem1
HybridOperatorOpt rewriting by_quantity_1
HybridOperatorOpt rewriting lineitem
HybridOperatorOpt rewriting by_quantity_obl
HybridOperatorOpt rewriting sorted
InsertOpenAndCloseOps rewriting lineitem0
InsertOpenAndCloseOps rewriting by_quantity_0
False
{<conclave.dag.Concat object at 0x7f9f32195790>}
InsertOpenAndCloseOps rewriting lineitem1
InsertOpenAndCloseOps rewriting by_quantity_1
False
{<conclave.dag.Concat object at 0x7f9f32195790>}
InsertOpenAndCloseOps rewriting lineitem
InsertOpenAndCloseOps rewriting by_quantity_obl
True
{<conclave.dag.SortBy object at 0x7f9f32195e50>}
InsertOpenAndCloseOps rewriting sorted
True
set()
ExpandCompositeOps rewriting lineitem0
ExpandCompositeOps rewriting by_quantity_0
ExpandCompositeOps rewriting by_quantity_0_close
ExpandCompositeOps rewriting lineitem1
ExpandCompositeOps rewriting by_quantity_1
ExpandCompositeOps rewriting by_quantity_1_close
ExpandCompositeOps rewriting lineitem
ExpandCompositeOps rewriting by_quantity_obl
ExpandCompositeOps rewriting sorted
ExpandCompositeOps rewriting sorted_open
StoredWithSimplifier rewriting lineitem0
StoredWithSimplifier rewriting by_quantity_0
StoredWithSimplifier rewriting by_quantity_0_close
StoredWithSimplifier rewriting lineitem1
StoredWithSimplifier rewriting by_quantity_1
StoredWithSimplifier rewriting by_quantity_1_close
StoredWithSimplifier rewriting lineitem
StoredWithSimplifier rewriting by_quantity_obl
StoredWithSimplifier rewriting sorted
StoredWithSimplifier rewriting sorted_open
EliminateSorts rewriting lineitem0
EliminateSorts rewriting by_quantity_0
EliminateSorts rewriting by_quantity_0_close
EliminateSorts rewriting lineitem1
EliminateSorts rewriting by_quantity_1
EliminateSorts rewriting by_quantity_1_close
EliminateSorts rewriting lineitem
EliminateSorts rewriting by_quantity_obl
EliminateSorts rewriting sorted
EliminateSorts rewriting sorted_open
##################
CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}

##################
python {1} CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}

python {2} CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}

obliv-c {1, 2} CREATE RELATION by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}
start python
Will write to /home/cc/conclave/demo/tpch_one/100MB/by_quantity_0.csv
done python
start python
Will write to /home/cc/conclave/demo/tpch_two/100MB/by_quantity_1.csv
done python
Connecting to localhost on port 1234 ...
Connecting to localhost on port 1234 ...

0 python
1 python
2 obliv-c
Will connect to 1 at 0.0.0.0:9001
Missing Jiff config 

Skipping other party's job:  <conclave.job.PythonJob object at 0x7f9f32187c10>
example-python-job-1: /home/cc/conclave/demo/tpch_two/100MB/example-python-job-1/workflow.py running
Dispatching as Evaluator.

done msg received DoneMsg(1)
Obliv-C DoneMsg received.

***

Writing header file here /home/cc/conclave/demo/tpch_two/100MB/example-oblivc-job-2

***
example-oblivc-job-2: /home/cc/conclave/demo/tpch_two/100MB/example-oblivc-job-2/bash.sh dispatching Obliv-C job. 

0 python
1 python
2 obliv-c
Will wait for 2 to connect
iam msg received IAMMsg(2)
Missing Jiff config 

example-python-job-0: /home/cc/conclave/demo/tpch_one/100MB/example-python-job-0/workflow.py running
Skipping other party's job:  <conclave.job.PythonJob object at 0x7f9f321877d0>
Dispatching as Garbler.

***

Writing header file here /home/cc/conclave/demo/tpch_one/100MB/example-oblivc-job-2

***
example-oblivc-job-2: /home/cc/conclave/demo/tpch_one/100MB/example-oblivc-job-2/bash.sh dispatching Obliv-C job. 
took 19.52034545096103 seconds to run MPC
{'backends': {'oblivc': {'party_count': '2', 'ip_port': 'localhost:1234', 'available': 1, 'oc_path': '/home/cc/obliv-c/bin/oblivcc'}}, 'user_config': {'workflow_name': 'example', 'leaky_ops': 0, 'pid': 1, 'all_pids': [1, 2], 'use_floats': 0, 'paths': {'input_path': '/home/cc/conclave/demo/tpch_one/100MB'}}, 'net': {'parties': [{'port': 9001, 'host': '0.0.0.0'}, {'port': 9002, 'host': '0.0.0.0'}]}}
MPCPushDown rewriting lineitem0
MPCPushDown rewriting lineitem1
MPCPushDown rewriting lineitem
MPCPushDown rewriting by_quantity
MPCPushDown rewriting sorted
UpdateColumns rewriting lineitem0
UpdateColumns rewriting by_quantity_0
UpdateColumns rewriting lineitem1
UpdateColumns rewriting by_quantity_1
UpdateColumns rewriting lineitem
UpdateColumns rewriting by_quantity_obl
UpdateColumns rewriting sorted
MPCPushUp rewriting sorted
MPCPushUp rewriting by_quantity_obl
MPCPushUp rewriting lineitem
MPCPushUp rewriting by_quantity_1
MPCPushUp rewriting lineitem1
MPCPushUp rewriting by_quantity_0
MPCPushUp rewriting lineitem0
TrustSetPropDown rewriting lineitem0
TrustSetPropDown rewriting by_quantity_0
TrustSetPropDown rewriting lineitem1
TrustSetPropDown rewriting by_quantity_1
TrustSetPropDown rewriting lineitem
TrustSetPropDown rewriting by_quantity_obl
TrustSetPropDown rewriting sorted
HybridOperatorOpt rewriting lineitem0
HybridOperatorOpt rewriting by_quantity_0
HybridOperatorOpt rewriting lineitem1
HybridOperatorOpt rewriting by_quantity_1
HybridOperatorOpt rewriting lineitem
HybridOperatorOpt rewriting by_quantity_obl
HybridOperatorOpt rewriting sorted
InsertOpenAndCloseOps rewriting lineitem0
InsertOpenAndCloseOps rewriting by_quantity_0
False
{<conclave.dag.Concat object at 0x7f9f321679d0>}
InsertOpenAndCloseOps rewriting lineitem1
InsertOpenAndCloseOps rewriting by_quantity_1
False
{<conclave.dag.Concat object at 0x7f9f321679d0>}
InsertOpenAndCloseOps rewriting lineitem
InsertOpenAndCloseOps rewriting by_quantity_obl
True
{<conclave.dag.SortBy object at 0x7f9f32167910>}
InsertOpenAndCloseOps rewriting sorted
True
set()
ExpandCompositeOps rewriting lineitem0
ExpandCompositeOps rewriting by_quantity_0
ExpandCompositeOps rewriting by_quantity_0_close
ExpandCompositeOps rewriting lineitem1
ExpandCompositeOps rewriting by_quantity_1
ExpandCompositeOps rewriting by_quantity_1_close
ExpandCompositeOps rewriting lineitem
ExpandCompositeOps rewriting by_quantity_obl
ExpandCompositeOps rewriting sorted
ExpandCompositeOps rewriting sorted_open
StoredWithSimplifier rewriting lineitem0
StoredWithSimplifier rewriting by_quantity_0
StoredWithSimplifier rewriting by_quantity_0_close
StoredWithSimplifier rewriting lineitem1
StoredWithSimplifier rewriting by_quantity_1
StoredWithSimplifier rewriting by_quantity_1_close
StoredWithSimplifier rewriting lineitem
StoredWithSimplifier rewriting by_quantity_obl
StoredWithSimplifier rewriting sorted
StoredWithSimplifier rewriting sorted_open
EliminateSorts rewriting lineitem0
EliminateSorts rewriting by_quantity_0
EliminateSorts rewriting by_quantity_0_close
EliminateSorts rewriting lineitem1
EliminateSorts rewriting by_quantity_1
EliminateSorts rewriting by_quantity_1_close
EliminateSorts rewriting lineitem
EliminateSorts rewriting by_quantity_obl
EliminateSorts rewriting sorted
EliminateSorts rewriting sorted_open
##################
CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}

##################
python {1} CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}

python {2} CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}

obliv-c {1, 2} CREATE RELATION by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}
MPCPushDown rewriting lineitem0
MPCPushDown rewriting lineitem1
MPCPushDown rewriting lineitem
MPCPushDown rewriting by_quantity
MPCPushDown rewriting sorted
UpdateColumns rewriting lineitem0
UpdateColumns rewriting by_quantity_0
UpdateColumns rewriting lineitem1
UpdateColumns rewriting by_quantity_1
UpdateColumns rewriting lineitem
UpdateColumns rewriting by_quantity_obl
UpdateColumns rewriting sorted
MPCPushUp rewriting sorted
MPCPushUp rewriting by_quantity_obl
MPCPushUp rewriting lineitem
MPCPushUp rewriting by_quantity_1
MPCPushUp rewriting lineitem1
MPCPushUp rewriting by_quantity_0
MPCPushUp rewriting lineitem0
TrustSetPropDown rewriting lineitem0
TrustSetPropDown rewriting by_quantity_0
TrustSetPropDown rewriting lineitem1
TrustSetPropDown rewriting by_quantity_1
TrustSetPropDown rewriting lineitem
TrustSetPropDown rewriting by_quantity_obl
TrustSetPropDown rewriting sorted
HybridOperatorOpt rewriting lineitem0
HybridOperatorOpt rewriting by_quantity_0
HybridOperatorOpt rewriting lineitem1
HybridOperatorOpt rewriting by_quantity_1
HybridOperatorOpt rewriting lineitem
HybridOperatorOpt rewriting by_quantity_obl
HybridOperatorOpt rewriting sorted
InsertOpenAndCloseOps rewriting lineitem0
InsertOpenAndCloseOps rewriting by_quantity_0
False
{<conclave.dag.Concat object at 0x7f9f32167fd0>}
InsertOpenAndCloseOps rewriting lineitem1
InsertOpenAndCloseOps rewriting by_quantity_1
False
{<conclave.dag.Concat object at 0x7f9f32167fd0>}
InsertOpenAndCloseOps rewriting lineitem
InsertOpenAndCloseOps rewriting by_quantity_obl
True
{<conclave.dag.SortBy object at 0x7f9f32147d10>}
InsertOpenAndCloseOps rewriting sorted
True
set()
ExpandCompositeOps rewriting lineitem0
ExpandCompositeOps rewriting by_quantity_0
ExpandCompositeOps rewriting by_quantity_0_close
ExpandCompositeOps rewriting lineitem1
ExpandCompositeOps rewriting by_quantity_1
ExpandCompositeOps rewriting by_quantity_1_close
ExpandCompositeOps rewriting lineitem
ExpandCompositeOps rewriting by_quantity_obl
ExpandCompositeOps rewriting sorted
ExpandCompositeOps rewriting sorted_open
StoredWithSimplifier rewriting lineitem0
StoredWithSimplifier rewriting by_quantity_0
StoredWithSimplifier rewriting by_quantity_0_close
StoredWithSimplifier rewriting lineitem1
StoredWithSimplifier rewriting by_quantity_1
StoredWithSimplifier rewriting by_quantity_1_close
StoredWithSimplifier rewriting lineitem
StoredWithSimplifier rewriting by_quantity_obl
StoredWithSimplifier rewriting sorted
StoredWithSimplifier rewriting sorted_open
EliminateSorts rewriting lineitem0
EliminateSorts rewriting by_quantity_0
EliminateSorts rewriting by_quantity_0_close
EliminateSorts rewriting lineitem1
EliminateSorts rewriting by_quantity_1
EliminateSorts rewriting by_quantity_1_close
EliminateSorts rewriting lineitem
EliminateSorts rewriting by_quantity_obl
EliminateSorts rewriting sorted
EliminateSorts rewriting sorted_open
##################
CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}

##################
python {1} CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}

python {2} CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}

obliv-c {1, 2} CREATE RELATION by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}
start python
Will write to /home/cc/conclave/demo/tpch_two/100MB/by_quantity_1.csv
done python
start python
Will write to /home/cc/conclave/demo/tpch_one/100MB/by_quantity_0.csv
done python
Connecting to localhost on port 1234 ...
Connecting to localhost on port 1234 ...

0 python
1 python
2 obliv-c
Will connect to 1 at 0.0.0.0:9001
Missing Jiff config 

Skipping other party's job:  <conclave.job.PythonJob object at 0x7f9f32167710>
example-python-job-1: /home/cc/conclave/demo/tpch_two/100MB/example-python-job-1/workflow.py running
Dispatching as Evaluator.

done msg received DoneMsg(1)
Obliv-C DoneMsg received.

***

Writing header file here /home/cc/conclave/demo/tpch_two/100MB/example-oblivc-job-2

***
example-oblivc-job-2: /home/cc/conclave/demo/tpch_two/100MB/example-oblivc-job-2/bash.sh dispatching Obliv-C job. 

0 python
1 python
2 obliv-c
Will wait for 2 to connect
iam msg received IAMMsg(2)
Missing Jiff config 

example-python-job-0: /home/cc/conclave/demo/tpch_one/100MB/example-python-job-0/workflow.py running
Skipping other party's job:  <conclave.job.PythonJob object at 0x7f9f32147e10>
Dispatching as Garbler.

***

Writing header file here /home/cc/conclave/demo/tpch_one/100MB/example-oblivc-job-2

***
example-oblivc-job-2: /home/cc/conclave/demo/tpch_one/100MB/example-oblivc-job-2/bash.sh dispatching Obliv-C job. 
took 19.47495250205975 seconds to run MPC
{'backends': {'oblivc': {'party_count': '2', 'ip_port': 'localhost:1234', 'available': 1, 'oc_path': '/home/cc/obliv-c/bin/oblivcc'}}, 'user_config': {'workflow_name': 'example', 'leaky_ops': 0, 'pid': 1, 'all_pids': [1, 2], 'use_floats': 0, 'paths': {'input_path': '/home/cc/conclave/demo/tpch_one/100MB'}}, 'net': {'parties': [{'port': 9001, 'host': '0.0.0.0'}, {'port': 9002, 'host': '0.0.0.0'}]}}
MPCPushDown rewriting lineitem0
MPCPushDown rewriting lineitem1
MPCPushDown rewriting lineitem
MPCPushDown rewriting by_quantity
MPCPushDown rewriting sorted
UpdateColumns rewriting lineitem0
UpdateColumns rewriting by_quantity_0
UpdateColumns rewriting lineitem1
UpdateColumns rewriting by_quantity_1
UpdateColumns rewriting lineitem
UpdateColumns rewriting by_quantity_obl
UpdateColumns rewriting sorted
MPCPushUp rewriting sorted
MPCPushUp rewriting by_quantity_obl
MPCPushUp rewriting lineitem
MPCPushUp rewriting by_quantity_1
MPCPushUp rewriting lineitem1
MPCPushUp rewriting by_quantity_0
MPCPushUp rewriting lineitem0
TrustSetPropDown rewriting lineitem0
TrustSetPropDown rewriting by_quantity_0
TrustSetPropDown rewriting lineitem1
TrustSetPropDown rewriting by_quantity_1
TrustSetPropDown rewriting lineitem
TrustSetPropDown rewriting by_quantity_obl
TrustSetPropDown rewriting sorted
HybridOperatorOpt rewriting lineitem0
HybridOperatorOpt rewriting by_quantity_0
HybridOperatorOpt rewriting lineitem1
HybridOperatorOpt rewriting by_quantity_1
HybridOperatorOpt rewriting lineitem
HybridOperatorOpt rewriting by_quantity_obl
HybridOperatorOpt rewriting sorted
InsertOpenAndCloseOps rewriting lineitem0
InsertOpenAndCloseOps rewriting by_quantity_0
False
{<conclave.dag.Concat object at 0x7f9f3218cb90>}
InsertOpenAndCloseOps rewriting lineitem1
InsertOpenAndCloseOps rewriting by_quantity_1
False
{<conclave.dag.Concat object at 0x7f9f3218cb90>}
InsertOpenAndCloseOps rewriting lineitem
InsertOpenAndCloseOps rewriting by_quantity_obl
True
{<conclave.dag.SortBy object at 0x7f9f32167810>}
InsertOpenAndCloseOps rewriting sorted
True
set()
ExpandCompositeOps rewriting lineitem0
ExpandCompositeOps rewriting by_quantity_0
ExpandCompositeOps rewriting by_quantity_0_close
ExpandCompositeOps rewriting lineitem1
ExpandCompositeOps rewriting by_quantity_1
ExpandCompositeOps rewriting by_quantity_1_close
ExpandCompositeOps rewriting lineitem
ExpandCompositeOps rewriting by_quantity_obl
ExpandCompositeOps rewriting sorted
ExpandCompositeOps rewriting sorted_open
StoredWithSimplifier rewriting lineitem0
StoredWithSimplifier rewriting by_quantity_0
StoredWithSimplifier rewriting by_quantity_0_close
StoredWithSimplifier rewriting lineitem1
StoredWithSimplifier rewriting by_quantity_1
StoredWithSimplifier rewriting by_quantity_1_close
StoredWithSimplifier rewriting lineitem
StoredWithSimplifier rewriting by_quantity_obl
StoredWithSimplifier rewriting sorted
StoredWithSimplifier rewriting sorted_open
EliminateSorts rewriting lineitem0
EliminateSorts rewriting by_quantity_0
EliminateSorts rewriting by_quantity_0_close
EliminateSorts rewriting lineitem1
EliminateSorts rewriting by_quantity_1
EliminateSorts rewriting by_quantity_1_close
EliminateSorts rewriting lineitem
EliminateSorts rewriting by_quantity_obl
EliminateSorts rewriting sorted
EliminateSorts rewriting sorted_open
##################
CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}

##################
python {1} CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}

python {2} CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}

obliv-c {1, 2} CREATE RELATION by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}
MPCPushDown rewriting lineitem0
MPCPushDown rewriting lineitem1
MPCPushDown rewriting lineitem
MPCPushDown rewriting by_quantity
MPCPushDown rewriting sorted
UpdateColumns rewriting lineitem0
UpdateColumns rewriting by_quantity_0
UpdateColumns rewriting lineitem1
UpdateColumns rewriting by_quantity_1
UpdateColumns rewriting lineitem
UpdateColumns rewriting by_quantity_obl
UpdateColumns rewriting sorted
MPCPushUp rewriting sorted
MPCPushUp rewriting by_quantity_obl
MPCPushUp rewriting lineitem
MPCPushUp rewriting by_quantity_1
MPCPushUp rewriting lineitem1
MPCPushUp rewriting by_quantity_0
MPCPushUp rewriting lineitem0
TrustSetPropDown rewriting lineitem0
TrustSetPropDown rewriting by_quantity_0
TrustSetPropDown rewriting lineitem1
TrustSetPropDown rewriting by_quantity_1
TrustSetPropDown rewriting lineitem
TrustSetPropDown rewriting by_quantity_obl
TrustSetPropDown rewriting sorted
HybridOperatorOpt rewriting lineitem0
HybridOperatorOpt rewriting by_quantity_0
HybridOperatorOpt rewriting lineitem1
HybridOperatorOpt rewriting by_quantity_1
HybridOperatorOpt rewriting lineitem
HybridOperatorOpt rewriting by_quantity_obl
HybridOperatorOpt rewriting sorted
InsertOpenAndCloseOps rewriting lineitem0
InsertOpenAndCloseOps rewriting by_quantity_0
False
{<conclave.dag.Concat object at 0x7f9f321675d0>}
InsertOpenAndCloseOps rewriting lineitem1
InsertOpenAndCloseOps rewriting by_quantity_1
False
{<conclave.dag.Concat object at 0x7f9f321675d0>}
InsertOpenAndCloseOps rewriting lineitem
InsertOpenAndCloseOps rewriting by_quantity_obl
True
{<conclave.dag.SortBy object at 0x7f9f32100190>}
InsertOpenAndCloseOps rewriting sorted
True
set()
ExpandCompositeOps rewriting lineitem0
ExpandCompositeOps rewriting by_quantity_0
ExpandCompositeOps rewriting by_quantity_0_close
ExpandCompositeOps rewriting lineitem1
ExpandCompositeOps rewriting by_quantity_1
ExpandCompositeOps rewriting by_quantity_1_close
ExpandCompositeOps rewriting lineitem
ExpandCompositeOps rewriting by_quantity_obl
ExpandCompositeOps rewriting sorted
ExpandCompositeOps rewriting sorted_open
StoredWithSimplifier rewriting lineitem0
StoredWithSimplifier rewriting by_quantity_0
StoredWithSimplifier rewriting by_quantity_0_close
StoredWithSimplifier rewriting lineitem1
StoredWithSimplifier rewriting by_quantity_1
StoredWithSimplifier rewriting by_quantity_1_close
StoredWithSimplifier rewriting lineitem
StoredWithSimplifier rewriting by_quantity_obl
StoredWithSimplifier rewriting sorted
StoredWithSimplifier rewriting sorted_open
EliminateSorts rewriting lineitem0
EliminateSorts rewriting by_quantity_0
EliminateSorts rewriting by_quantity_0_close
EliminateSorts rewriting lineitem1
EliminateSorts rewriting by_quantity_1
EliminateSorts rewriting by_quantity_1_close
EliminateSorts rewriting lineitem
EliminateSorts rewriting by_quantity_obl
EliminateSorts rewriting sorted
EliminateSorts rewriting sorted_open
##################
CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}

##################
python {1} CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}

python {2} CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}

obliv-c {1, 2} CREATE RELATION by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}
start python
Will write to /home/cc/conclave/demo/tpch_two/100MB/by_quantity_1.csv
done python
start python
Will write to /home/cc/conclave/demo/tpch_one/100MB/by_quantity_0.csv
done python
Connecting to localhost on port 1234 ...
Connecting to localhost on port 1234 ...

0 python
1 python
2 obliv-c
Will connect to 1 at 0.0.0.0:9001
Missing Jiff config 

Skipping other party's job:  <conclave.job.PythonJob object at 0x7f9f321678d0>
example-python-job-1: /home/cc/conclave/demo/tpch_two/100MB/example-python-job-1/workflow.py running
Dispatching as Evaluator.

done msg received DoneMsg(1)
Obliv-C DoneMsg received.

***

Writing header file here /home/cc/conclave/demo/tpch_two/100MB/example-oblivc-job-2

***
example-oblivc-job-2: /home/cc/conclave/demo/tpch_two/100MB/example-oblivc-job-2/bash.sh dispatching Obliv-C job. 

0 python
1 python
2 obliv-c
Will wait for 2 to connect
iam msg received IAMMsg(2)
Missing Jiff config 

example-python-job-0: /home/cc/conclave/demo/tpch_one/100MB/example-python-job-0/workflow.py running
Skipping other party's job:  <conclave.job.PythonJob object at 0x7f9f3218c410>
Dispatching as Garbler.

***

Writing header file here /home/cc/conclave/demo/tpch_one/100MB/example-oblivc-job-2

***
example-oblivc-job-2: /home/cc/conclave/demo/tpch_one/100MB/example-oblivc-job-2/bash.sh dispatching Obliv-C job. 
took 19.505746884969994 seconds to run MPC
{'backends': {'oblivc': {'party_count': '2', 'ip_port': 'localhost:1234', 'available': 1, 'oc_path': '/home/cc/obliv-c/bin/oblivcc'}}, 'user_config': {'workflow_name': 'example', 'leaky_ops': 0, 'pid': 1, 'all_pids': [1, 2], 'use_floats': 0, 'paths': {'input_path': '/home/cc/conclave/demo/tpch_one/100MB'}}, 'net': {'parties': [{'port': 9001, 'host': '0.0.0.0'}, {'port': 9002, 'host': '0.0.0.0'}]}}
MPCPushDown rewriting lineitem0
MPCPushDown rewriting lineitem1
MPCPushDown rewriting lineitem
MPCPushDown rewriting by_quantity
MPCPushDown rewriting sorted
UpdateColumns rewriting lineitem0
UpdateColumns rewriting by_quantity_0
UpdateColumns rewriting lineitem1
UpdateColumns rewriting by_quantity_1
UpdateColumns rewriting lineitem
UpdateColumns rewriting by_quantity_obl
UpdateColumns rewriting sorted
MPCPushUp rewriting sorted
MPCPushUp rewriting by_quantity_obl
MPCPushUp rewriting lineitem
MPCPushUp rewriting by_quantity_1
MPCPushUp rewriting lineitem1
MPCPushUp rewriting by_quantity_0
MPCPushUp rewriting lineitem0
TrustSetPropDown rewriting lineitem0
TrustSetPropDown rewriting by_quantity_0
TrustSetPropDown rewriting lineitem1
TrustSetPropDown rewriting by_quantity_1
TrustSetPropDown rewriting lineitem
TrustSetPropDown rewriting by_quantity_obl
TrustSetPropDown rewriting sorted
HybridOperatorOpt rewriting lineitem0
HybridOperatorOpt rewriting by_quantity_0
HybridOperatorOpt rewriting lineitem1
HybridOperatorOpt rewriting by_quantity_1
HybridOperatorOpt rewriting lineitem
HybridOperatorOpt rewriting by_quantity_obl
HybridOperatorOpt rewriting sorted
InsertOpenAndCloseOps rewriting lineitem0
InsertOpenAndCloseOps rewriting by_quantity_0
False
{<conclave.dag.Concat object at 0x7f9f320f91d0>}
InsertOpenAndCloseOps rewriting lineitem1
InsertOpenAndCloseOps rewriting by_quantity_1
False
{<conclave.dag.Concat object at 0x7f9f320f91d0>}
InsertOpenAndCloseOps rewriting lineitem
InsertOpenAndCloseOps rewriting by_quantity_obl
True
{<conclave.dag.SortBy object at 0x7f9f320f93d0>}
InsertOpenAndCloseOps rewriting sorted
True
set()
ExpandCompositeOps rewriting lineitem0
ExpandCompositeOps rewriting by_quantity_0
ExpandCompositeOps rewriting by_quantity_0_close
ExpandCompositeOps rewriting lineitem1
ExpandCompositeOps rewriting by_quantity_1
ExpandCompositeOps rewriting by_quantity_1_close
ExpandCompositeOps rewriting lineitem
ExpandCompositeOps rewriting by_quantity_obl
ExpandCompositeOps rewriting sorted
ExpandCompositeOps rewriting sorted_open
StoredWithSimplifier rewriting lineitem0
StoredWithSimplifier rewriting by_quantity_0
StoredWithSimplifier rewriting by_quantity_0_close
StoredWithSimplifier rewriting lineitem1
StoredWithSimplifier rewriting by_quantity_1
StoredWithSimplifier rewriting by_quantity_1_close
StoredWithSimplifier rewriting lineitem
StoredWithSimplifier rewriting by_quantity_obl
StoredWithSimplifier rewriting sorted
StoredWithSimplifier rewriting sorted_open
EliminateSorts rewriting lineitem0
EliminateSorts rewriting by_quantity_0
EliminateSorts rewriting by_quantity_0_close
EliminateSorts rewriting lineitem1
EliminateSorts rewriting by_quantity_1
EliminateSorts rewriting by_quantity_1_close
EliminateSorts rewriting lineitem
EliminateSorts rewriting by_quantity_obl
EliminateSorts rewriting sorted
EliminateSorts rewriting sorted_open
##################
CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}

##################
python {1} CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}

python {2} CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}

obliv-c {1, 2} CREATE RELATION by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}
MPCPushDown rewriting lineitem0
MPCPushDown rewriting lineitem1
MPCPushDown rewriting lineitem
MPCPushDown rewriting by_quantity
MPCPushDown rewriting sorted
UpdateColumns rewriting lineitem0
UpdateColumns rewriting by_quantity_0
UpdateColumns rewriting lineitem1
UpdateColumns rewriting by_quantity_1
UpdateColumns rewriting lineitem
UpdateColumns rewriting by_quantity_obl
UpdateColumns rewriting sorted
MPCPushUp rewriting sorted
MPCPushUp rewriting by_quantity_obl
MPCPushUp rewriting lineitem
MPCPushUp rewriting by_quantity_1
MPCPushUp rewriting lineitem1
MPCPushUp rewriting by_quantity_0
MPCPushUp rewriting lineitem0
TrustSetPropDown rewriting lineitem0
TrustSetPropDown rewriting by_quantity_0
TrustSetPropDown rewriting lineitem1
TrustSetPropDown rewriting by_quantity_1
TrustSetPropDown rewriting lineitem
TrustSetPropDown rewriting by_quantity_obl
TrustSetPropDown rewriting sorted
HybridOperatorOpt rewriting lineitem0
HybridOperatorOpt rewriting by_quantity_0
HybridOperatorOpt rewriting lineitem1
HybridOperatorOpt rewriting by_quantity_1
HybridOperatorOpt rewriting lineitem
HybridOperatorOpt rewriting by_quantity_obl
HybridOperatorOpt rewriting sorted
InsertOpenAndCloseOps rewriting lineitem0
InsertOpenAndCloseOps rewriting by_quantity_0
False
{<conclave.dag.Concat object at 0x7f9f32167f10>}
InsertOpenAndCloseOps rewriting lineitem1
InsertOpenAndCloseOps rewriting by_quantity_1
False
{<conclave.dag.Concat object at 0x7f9f32167f10>}
InsertOpenAndCloseOps rewriting lineitem
InsertOpenAndCloseOps rewriting by_quantity_obl
True
{<conclave.dag.SortBy object at 0x7f9f3210b590>}
InsertOpenAndCloseOps rewriting sorted
True
set()
ExpandCompositeOps rewriting lineitem0
ExpandCompositeOps rewriting by_quantity_0
ExpandCompositeOps rewriting by_quantity_0_close
ExpandCompositeOps rewriting lineitem1
ExpandCompositeOps rewriting by_quantity_1
ExpandCompositeOps rewriting by_quantity_1_close
ExpandCompositeOps rewriting lineitem
ExpandCompositeOps rewriting by_quantity_obl
ExpandCompositeOps rewriting sorted
ExpandCompositeOps rewriting sorted_open
StoredWithSimplifier rewriting lineitem0
StoredWithSimplifier rewriting by_quantity_0
StoredWithSimplifier rewriting by_quantity_0_close
StoredWithSimplifier rewriting lineitem1
StoredWithSimplifier rewriting by_quantity_1
StoredWithSimplifier rewriting by_quantity_1_close
StoredWithSimplifier rewriting lineitem
StoredWithSimplifier rewriting by_quantity_obl
StoredWithSimplifier rewriting sorted
StoredWithSimplifier rewriting sorted_open
EliminateSorts rewriting lineitem0
EliminateSorts rewriting by_quantity_0
EliminateSorts rewriting by_quantity_0_close
EliminateSorts rewriting lineitem1
EliminateSorts rewriting by_quantity_1
EliminateSorts rewriting by_quantity_1_close
EliminateSorts rewriting lineitem
EliminateSorts rewriting by_quantity_obl
EliminateSorts rewriting sorted
EliminateSorts rewriting sorted_open
##################
CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}

##################
python {1} CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}

python {2} CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}

obliv-c {1, 2} CREATE RELATION by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}
start python
Will write to /home/cc/conclave/demo/tpch_one/100MB/by_quantity_0.csv
done python
start python
Will write to /home/cc/conclave/demo/tpch_two/100MB/by_quantity_1.csv
done python
Connecting to localhost on port 1234 ...
Connecting to localhost on port 1234 ...

0 python
1 python
2 obliv-c
Will connect to 1 at 0.0.0.0:9001
Missing Jiff config 

Skipping other party's job:  <conclave.job.PythonJob object at 0x7f9f320f9290>
example-python-job-1: /home/cc/conclave/demo/tpch_two/100MB/example-python-job-1/workflow.py running
Dispatching as Evaluator.

done msg received DoneMsg(1)
Obliv-C DoneMsg received.

***

Writing header file here /home/cc/conclave/demo/tpch_two/100MB/example-oblivc-job-2

***
example-oblivc-job-2: /home/cc/conclave/demo/tpch_two/100MB/example-oblivc-job-2/bash.sh dispatching Obliv-C job. 

0 python
1 python
2 obliv-c
Will wait for 2 to connect
iam msg received IAMMsg(2)
Missing Jiff config 

example-python-job-0: /home/cc/conclave/demo/tpch_one/100MB/example-python-job-0/workflow.py running
Skipping other party's job:  <conclave.job.PythonJob object at 0x7f9f320f3610>
Dispatching as Garbler.

***

Writing header file here /home/cc/conclave/demo/tpch_one/100MB/example-oblivc-job-2

***
example-oblivc-job-2: /home/cc/conclave/demo/tpch_one/100MB/example-oblivc-job-2/bash.sh dispatching Obliv-C job. 
took 19.562503798981197 seconds to run MPC
{'backends': {'oblivc': {'party_count': '2', 'ip_port': 'localhost:1234', 'available': 1, 'oc_path': '/home/cc/obliv-c/bin/oblivcc'}}, 'user_config': {'workflow_name': 'example', 'leaky_ops': 0, 'pid': 1, 'all_pids': [1, 2], 'use_floats': 0, 'paths': {'input_path': '/home/cc/conclave/demo/tpch_one/100MB'}}, 'net': {'parties': [{'port': 9001, 'host': '0.0.0.0'}, {'port': 9002, 'host': '0.0.0.0'}]}}
MPCPushDown rewriting lineitem0
MPCPushDown rewriting lineitem1
MPCPushDown rewriting lineitem
MPCPushDown rewriting by_quantity
MPCPushDown rewriting sorted
UpdateColumns rewriting lineitem0
UpdateColumns rewriting by_quantity_0
UpdateColumns rewriting lineitem1
UpdateColumns rewriting by_quantity_1
UpdateColumns rewriting lineitem
UpdateColumns rewriting by_quantity_obl
UpdateColumns rewriting sorted
MPCPushUp rewriting sorted
MPCPushUp rewriting by_quantity_obl
MPCPushUp rewriting lineitem
MPCPushUp rewriting by_quantity_1
MPCPushUp rewriting lineitem1
MPCPushUp rewriting by_quantity_0
MPCPushUp rewriting lineitem0
TrustSetPropDown rewriting lineitem0
TrustSetPropDown rewriting by_quantity_0
TrustSetPropDown rewriting lineitem1
TrustSetPropDown rewriting by_quantity_1
TrustSetPropDown rewriting lineitem
TrustSetPropDown rewriting by_quantity_obl
TrustSetPropDown rewriting sorted
HybridOperatorOpt rewriting lineitem0
HybridOperatorOpt rewriting by_quantity_0
HybridOperatorOpt rewriting lineitem1
HybridOperatorOpt rewriting by_quantity_1
HybridOperatorOpt rewriting lineitem
HybridOperatorOpt rewriting by_quantity_obl
HybridOperatorOpt rewriting sorted
InsertOpenAndCloseOps rewriting lineitem0
InsertOpenAndCloseOps rewriting by_quantity_0
False
{<conclave.dag.Concat object at 0x7f9f32100a10>}
InsertOpenAndCloseOps rewriting lineitem1
InsertOpenAndCloseOps rewriting by_quantity_1
False
{<conclave.dag.Concat object at 0x7f9f32100a10>}
InsertOpenAndCloseOps rewriting lineitem
InsertOpenAndCloseOps rewriting by_quantity_obl
True
{<conclave.dag.SortBy object at 0x7f9f320f92d0>}
InsertOpenAndCloseOps rewriting sorted
True
set()
ExpandCompositeOps rewriting lineitem0
ExpandCompositeOps rewriting by_quantity_0
ExpandCompositeOps rewriting by_quantity_0_close
ExpandCompositeOps rewriting lineitem1
ExpandCompositeOps rewriting by_quantity_1
ExpandCompositeOps rewriting by_quantity_1_close
ExpandCompositeOps rewriting lineitem
ExpandCompositeOps rewriting by_quantity_obl
ExpandCompositeOps rewriting sorted
ExpandCompositeOps rewriting sorted_open
StoredWithSimplifier rewriting lineitem0
StoredWithSimplifier rewriting by_quantity_0
StoredWithSimplifier rewriting by_quantity_0_close
StoredWithSimplifier rewriting lineitem1
StoredWithSimplifier rewriting by_quantity_1
StoredWithSimplifier rewriting by_quantity_1_close
StoredWithSimplifier rewriting lineitem
StoredWithSimplifier rewriting by_quantity_obl
StoredWithSimplifier rewriting sorted
StoredWithSimplifier rewriting sorted_open
EliminateSorts rewriting lineitem0
EliminateSorts rewriting by_quantity_0
EliminateSorts rewriting by_quantity_0_close
EliminateSorts rewriting lineitem1
EliminateSorts rewriting by_quantity_1
EliminateSorts rewriting by_quantity_1_close
EliminateSorts rewriting lineitem
EliminateSorts rewriting by_quantity_obl
EliminateSorts rewriting sorted
EliminateSorts rewriting sorted_open
##################
CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}

##################
python {1} CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}

python {2} CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}

obliv-c {1, 2} CREATE RELATION by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}
MPCPushDown rewriting lineitem0
MPCPushDown rewriting lineitem1
MPCPushDown rewriting lineitem
MPCPushDown rewriting by_quantity
MPCPushDown rewriting sorted
UpdateColumns rewriting lineitem0
UpdateColumns rewriting by_quantity_0
UpdateColumns rewriting lineitem1
UpdateColumns rewriting by_quantity_1
UpdateColumns rewriting lineitem
UpdateColumns rewriting by_quantity_obl
UpdateColumns rewriting sorted
MPCPushUp rewriting sorted
MPCPushUp rewriting by_quantity_obl
MPCPushUp rewriting lineitem
MPCPushUp rewriting by_quantity_1
MPCPushUp rewriting lineitem1
MPCPushUp rewriting by_quantity_0
MPCPushUp rewriting lineitem0
TrustSetPropDown rewriting lineitem0
TrustSetPropDown rewriting by_quantity_0
TrustSetPropDown rewriting lineitem1
TrustSetPropDown rewriting by_quantity_1
TrustSetPropDown rewriting lineitem
TrustSetPropDown rewriting by_quantity_obl
TrustSetPropDown rewriting sorted
HybridOperatorOpt rewriting lineitem0
HybridOperatorOpt rewriting by_quantity_0
HybridOperatorOpt rewriting lineitem1
HybridOperatorOpt rewriting by_quantity_1
HybridOperatorOpt rewriting lineitem
HybridOperatorOpt rewriting by_quantity_obl
HybridOperatorOpt rewriting sorted
InsertOpenAndCloseOps rewriting lineitem0
InsertOpenAndCloseOps rewriting by_quantity_0
False
{<conclave.dag.Concat object at 0x7f9f320f9650>}
InsertOpenAndCloseOps rewriting lineitem1
InsertOpenAndCloseOps rewriting by_quantity_1
False
{<conclave.dag.Concat object at 0x7f9f320f9650>}
InsertOpenAndCloseOps rewriting lineitem
InsertOpenAndCloseOps rewriting by_quantity_obl
True
{<conclave.dag.SortBy object at 0x7f9f32114990>}
InsertOpenAndCloseOps rewriting sorted
True
set()
ExpandCompositeOps rewriting lineitem0
ExpandCompositeOps rewriting by_quantity_0
ExpandCompositeOps rewriting by_quantity_0_close
ExpandCompositeOps rewriting lineitem1
ExpandCompositeOps rewriting by_quantity_1
ExpandCompositeOps rewriting by_quantity_1_close
ExpandCompositeOps rewriting lineitem
ExpandCompositeOps rewriting by_quantity_obl
ExpandCompositeOps rewriting sorted
ExpandCompositeOps rewriting sorted_open
StoredWithSimplifier rewriting lineitem0
StoredWithSimplifier rewriting by_quantity_0
StoredWithSimplifier rewriting by_quantity_0_close
StoredWithSimplifier rewriting lineitem1
StoredWithSimplifier rewriting by_quantity_1
StoredWithSimplifier rewriting by_quantity_1_close
StoredWithSimplifier rewriting lineitem
StoredWithSimplifier rewriting by_quantity_obl
StoredWithSimplifier rewriting sorted
StoredWithSimplifier rewriting sorted_open
EliminateSorts rewriting lineitem0
EliminateSorts rewriting by_quantity_0
EliminateSorts rewriting by_quantity_0_close
EliminateSorts rewriting lineitem1
EliminateSorts rewriting by_quantity_1
EliminateSorts rewriting by_quantity_1_close
EliminateSorts rewriting lineitem
EliminateSorts rewriting by_quantity_obl
EliminateSorts rewriting sorted
EliminateSorts rewriting sorted_open
##################
CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}

##################
python {1} CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}

python {2} CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}

obliv-c {1, 2} CREATE RELATION by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}
start python
Will write to /home/cc/conclave/demo/tpch_one/100MB/by_quantity_0.csv
done python
start python
Will write to /home/cc/conclave/demo/tpch_two/100MB/by_quantity_1.csv
done python
Connecting to localhost on port 1234 ...
Connecting to localhost on port 1234 ...

0 python
1 python
2 obliv-c
Will connect to 1 at 0.0.0.0:9001
Missing Jiff config 

Skipping other party's job:  <conclave.job.PythonJob object at 0x7f9f320f95d0>
example-python-job-1: /home/cc/conclave/demo/tpch_two/100MB/example-python-job-1/workflow.py running
Dispatching as Evaluator.

done msg received DoneMsg(1)
Obliv-C DoneMsg received.

***

Writing header file here /home/cc/conclave/demo/tpch_two/100MB/example-oblivc-job-2

***
example-oblivc-job-2: /home/cc/conclave/demo/tpch_two/100MB/example-oblivc-job-2/bash.sh dispatching Obliv-C job. 

0 python
1 python
2 obliv-c
Will wait for 2 to connect
iam msg received IAMMsg(2)
Missing Jiff config 

example-python-job-0: /home/cc/conclave/demo/tpch_one/100MB/example-python-job-0/workflow.py running
Skipping other party's job:  <conclave.job.PythonJob object at 0x7f9f32100710>
Dispatching as Garbler.

***

Writing header file here /home/cc/conclave/demo/tpch_one/100MB/example-oblivc-job-2

***
example-oblivc-job-2: /home/cc/conclave/demo/tpch_one/100MB/example-oblivc-job-2/bash.sh dispatching Obliv-C job. 
took 19.575747153023258 seconds to run MPC
{'backends': {'oblivc': {'party_count': '2', 'ip_port': 'localhost:1234', 'available': 1, 'oc_path': '/home/cc/obliv-c/bin/oblivcc'}}, 'user_config': {'workflow_name': 'example', 'leaky_ops': 0, 'pid': 1, 'all_pids': [1, 2], 'use_floats': 0, 'paths': {'input_path': '/home/cc/conclave/demo/tpch_one/100MB'}}, 'net': {'parties': [{'port': 9001, 'host': '0.0.0.0'}, {'port': 9002, 'host': '0.0.0.0'}]}}
MPCPushDown rewriting lineitem0
MPCPushDown rewriting lineitem1
MPCPushDown rewriting lineitem
MPCPushDown rewriting by_quantity
MPCPushDown rewriting sorted
UpdateColumns rewriting lineitem0
UpdateColumns rewriting by_quantity_0
UpdateColumns rewriting lineitem1
UpdateColumns rewriting by_quantity_1
UpdateColumns rewriting lineitem
UpdateColumns rewriting by_quantity_obl
UpdateColumns rewriting sorted
MPCPushUp rewriting sorted
MPCPushUp rewriting by_quantity_obl
MPCPushUp rewriting lineitem
MPCPushUp rewriting by_quantity_1
MPCPushUp rewriting lineitem1
MPCPushUp rewriting by_quantity_0
MPCPushUp rewriting lineitem0
TrustSetPropDown rewriting lineitem0
TrustSetPropDown rewriting by_quantity_0
TrustSetPropDown rewriting lineitem1
TrustSetPropDown rewriting by_quantity_1
TrustSetPropDown rewriting lineitem
TrustSetPropDown rewriting by_quantity_obl
TrustSetPropDown rewriting sorted
HybridOperatorOpt rewriting lineitem0
HybridOperatorOpt rewriting by_quantity_0
HybridOperatorOpt rewriting lineitem1
HybridOperatorOpt rewriting by_quantity_1
HybridOperatorOpt rewriting lineitem
HybridOperatorOpt rewriting by_quantity_obl
HybridOperatorOpt rewriting sorted
InsertOpenAndCloseOps rewriting lineitem0
InsertOpenAndCloseOps rewriting by_quantity_0
False
{<conclave.dag.Concat object at 0x7f9f32112c50>}
InsertOpenAndCloseOps rewriting lineitem1
InsertOpenAndCloseOps rewriting by_quantity_1
False
{<conclave.dag.Concat object at 0x7f9f32112c50>}
InsertOpenAndCloseOps rewriting lineitem
InsertOpenAndCloseOps rewriting by_quantity_obl
True
{<conclave.dag.SortBy object at 0x7f9f320f95d0>}
InsertOpenAndCloseOps rewriting sorted
True
set()
ExpandCompositeOps rewriting lineitem0
ExpandCompositeOps rewriting by_quantity_0
ExpandCompositeOps rewriting by_quantity_0_close
ExpandCompositeOps rewriting lineitem1
ExpandCompositeOps rewriting by_quantity_1
ExpandCompositeOps rewriting by_quantity_1_close
ExpandCompositeOps rewriting lineitem
ExpandCompositeOps rewriting by_quantity_obl
ExpandCompositeOps rewriting sorted
ExpandCompositeOps rewriting sorted_open
StoredWithSimplifier rewriting lineitem0
StoredWithSimplifier rewriting by_quantity_0
StoredWithSimplifier rewriting by_quantity_0_close
StoredWithSimplifier rewriting lineitem1
StoredWithSimplifier rewriting by_quantity_1
StoredWithSimplifier rewriting by_quantity_1_close
StoredWithSimplifier rewriting lineitem
StoredWithSimplifier rewriting by_quantity_obl
StoredWithSimplifier rewriting sorted
StoredWithSimplifier rewriting sorted_open
EliminateSorts rewriting lineitem0
EliminateSorts rewriting by_quantity_0
EliminateSorts rewriting by_quantity_0_close
EliminateSorts rewriting lineitem1
EliminateSorts rewriting by_quantity_1
EliminateSorts rewriting by_quantity_1_close
EliminateSorts rewriting lineitem
EliminateSorts rewriting by_quantity_obl
EliminateSorts rewriting sorted
EliminateSorts rewriting sorted_open
##################
CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}

##################
python {1} CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}

python {2} CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}

obliv-c {1, 2} CREATE RELATION by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}
MPCPushDown rewriting lineitem0
MPCPushDown rewriting lineitem1
MPCPushDown rewriting lineitem
MPCPushDown rewriting by_quantity
MPCPushDown rewriting sorted
UpdateColumns rewriting lineitem0
UpdateColumns rewriting by_quantity_0
UpdateColumns rewriting lineitem1
UpdateColumns rewriting by_quantity_1
UpdateColumns rewriting lineitem
UpdateColumns rewriting by_quantity_obl
UpdateColumns rewriting sorted
MPCPushUp rewriting sorted
MPCPushUp rewriting by_quantity_obl
MPCPushUp rewriting lineitem
MPCPushUp rewriting by_quantity_1
MPCPushUp rewriting lineitem1
MPCPushUp rewriting by_quantity_0
MPCPushUp rewriting lineitem0
TrustSetPropDown rewriting lineitem0
TrustSetPropDown rewriting by_quantity_0
TrustSetPropDown rewriting lineitem1
TrustSetPropDown rewriting by_quantity_1
TrustSetPropDown rewriting lineitem
TrustSetPropDown rewriting by_quantity_obl
TrustSetPropDown rewriting sorted
HybridOperatorOpt rewriting lineitem0
HybridOperatorOpt rewriting by_quantity_0
HybridOperatorOpt rewriting lineitem1
HybridOperatorOpt rewriting by_quantity_1
HybridOperatorOpt rewriting lineitem
HybridOperatorOpt rewriting by_quantity_obl
HybridOperatorOpt rewriting sorted
InsertOpenAndCloseOps rewriting lineitem0
InsertOpenAndCloseOps rewriting by_quantity_0
False
{<conclave.dag.Concat object at 0x7f9f321230d0>}
InsertOpenAndCloseOps rewriting lineitem1
InsertOpenAndCloseOps rewriting by_quantity_1
False
{<conclave.dag.Concat object at 0x7f9f321230d0>}
InsertOpenAndCloseOps rewriting lineitem
InsertOpenAndCloseOps rewriting by_quantity_obl
True
{<conclave.dag.SortBy object at 0x7f9f32123d90>}
InsertOpenAndCloseOps rewriting sorted
True
set()
ExpandCompositeOps rewriting lineitem0
ExpandCompositeOps rewriting by_quantity_0
ExpandCompositeOps rewriting by_quantity_0_close
ExpandCompositeOps rewriting lineitem1
ExpandCompositeOps rewriting by_quantity_1
ExpandCompositeOps rewriting by_quantity_1_close
ExpandCompositeOps rewriting lineitem
ExpandCompositeOps rewriting by_quantity_obl
ExpandCompositeOps rewriting sorted
ExpandCompositeOps rewriting sorted_open
StoredWithSimplifier rewriting lineitem0
StoredWithSimplifier rewriting by_quantity_0
StoredWithSimplifier rewriting by_quantity_0_close
StoredWithSimplifier rewriting lineitem1
StoredWithSimplifier rewriting by_quantity_1
StoredWithSimplifier rewriting by_quantity_1_close
StoredWithSimplifier rewriting lineitem
StoredWithSimplifier rewriting by_quantity_obl
StoredWithSimplifier rewriting sorted
StoredWithSimplifier rewriting sorted_open
EliminateSorts rewriting lineitem0
EliminateSorts rewriting by_quantity_0
EliminateSorts rewriting by_quantity_0_close
EliminateSorts rewriting lineitem1
EliminateSorts rewriting by_quantity_1
EliminateSorts rewriting by_quantity_1_close
EliminateSorts rewriting lineitem
EliminateSorts rewriting by_quantity_obl
EliminateSorts rewriting sorted
EliminateSorts rewriting sorted_open
##################
CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}

##################
python {1} CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}

python {2} CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}

obliv-c {1, 2} CREATE RELATION by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}
start python
Will write to /home/cc/conclave/demo/tpch_one/100MB/by_quantity_0.csv
done python
start python
Will write to /home/cc/conclave/demo/tpch_two/100MB/by_quantity_1.csv
done python
Connecting to localhost on port 1234 ...
Connecting to localhost on port 1234 ...

0 python
1 python
2 obliv-c
Will connect to 1 at 0.0.0.0:9001
Missing Jiff config 

Skipping other party's job:  <conclave.job.PythonJob object at 0x7f9f320f9090>
example-python-job-1: /home/cc/conclave/demo/tpch_two/100MB/example-python-job-1/workflow.py running
Dispatching as Evaluator.

done msg received DoneMsg(1)
Obliv-C DoneMsg received.

***

Writing header file here /home/cc/conclave/demo/tpch_two/100MB/example-oblivc-job-2

***
example-oblivc-job-2: /home/cc/conclave/demo/tpch_two/100MB/example-oblivc-job-2/bash.sh dispatching Obliv-C job. 

0 python
1 python
2 obliv-c
Will wait for 2 to connect
iam msg received IAMMsg(2)
Missing Jiff config 

example-python-job-0: /home/cc/conclave/demo/tpch_one/100MB/example-python-job-0/workflow.py running
Skipping other party's job:  <conclave.job.PythonJob object at 0x7f9f32112350>
Dispatching as Garbler.

***

Writing header file here /home/cc/conclave/demo/tpch_one/100MB/example-oblivc-job-2

***
example-oblivc-job-2: /home/cc/conclave/demo/tpch_one/100MB/example-oblivc-job-2/bash.sh dispatching Obliv-C job. 
took 19.535224084975198 seconds to run MPC
{'backends': {'oblivc': {'party_count': '2', 'ip_port': 'localhost:1234', 'available': 1, 'oc_path': '/home/cc/obliv-c/bin/oblivcc'}}, 'user_config': {'workflow_name': 'example', 'leaky_ops': 0, 'pid': 1, 'all_pids': [1, 2], 'use_floats': 0, 'paths': {'input_path': '/home/cc/conclave/demo/tpch_one/100MB'}}, 'net': {'parties': [{'port': 9001, 'host': '0.0.0.0'}, {'port': 9002, 'host': '0.0.0.0'}]}}
MPCPushDown rewriting lineitem0
MPCPushDown rewriting lineitem1
MPCPushDown rewriting lineitem
MPCPushDown rewriting by_quantity
MPCPushDown rewriting sorted
UpdateColumns rewriting lineitem0
UpdateColumns rewriting by_quantity_0
UpdateColumns rewriting lineitem1
UpdateColumns rewriting by_quantity_1
UpdateColumns rewriting lineitem
UpdateColumns rewriting by_quantity_obl
UpdateColumns rewriting sorted
MPCPushUp rewriting sorted
MPCPushUp rewriting by_quantity_obl
MPCPushUp rewriting lineitem
MPCPushUp rewriting by_quantity_1
MPCPushUp rewriting lineitem1
MPCPushUp rewriting by_quantity_0
MPCPushUp rewriting lineitem0
TrustSetPropDown rewriting lineitem0
TrustSetPropDown rewriting by_quantity_0
TrustSetPropDown rewriting lineitem1
TrustSetPropDown rewriting by_quantity_1
TrustSetPropDown rewriting lineitem
TrustSetPropDown rewriting by_quantity_obl
TrustSetPropDown rewriting sorted
HybridOperatorOpt rewriting lineitem0
HybridOperatorOpt rewriting by_quantity_0
HybridOperatorOpt rewriting lineitem1
HybridOperatorOpt rewriting by_quantity_1
HybridOperatorOpt rewriting lineitem
HybridOperatorOpt rewriting by_quantity_obl
HybridOperatorOpt rewriting sorted
InsertOpenAndCloseOps rewriting lineitem0
InsertOpenAndCloseOps rewriting by_quantity_0
False
{<conclave.dag.Concat object at 0x7f9f32118ad0>}
InsertOpenAndCloseOps rewriting lineitem1
InsertOpenAndCloseOps rewriting by_quantity_1
False
{<conclave.dag.Concat object at 0x7f9f32118ad0>}
InsertOpenAndCloseOps rewriting lineitem
InsertOpenAndCloseOps rewriting by_quantity_obl
True
{<conclave.dag.SortBy object at 0x7f9f32118250>}
InsertOpenAndCloseOps rewriting sorted
True
set()
ExpandCompositeOps rewriting lineitem0
ExpandCompositeOps rewriting by_quantity_0
ExpandCompositeOps rewriting by_quantity_0_close
ExpandCompositeOps rewriting lineitem1
ExpandCompositeOps rewriting by_quantity_1
ExpandCompositeOps rewriting by_quantity_1_close
ExpandCompositeOps rewriting lineitem
ExpandCompositeOps rewriting by_quantity_obl
ExpandCompositeOps rewriting sorted
ExpandCompositeOps rewriting sorted_open
StoredWithSimplifier rewriting lineitem0
StoredWithSimplifier rewriting by_quantity_0
StoredWithSimplifier rewriting by_quantity_0_close
StoredWithSimplifier rewriting lineitem1
StoredWithSimplifier rewriting by_quantity_1
StoredWithSimplifier rewriting by_quantity_1_close
StoredWithSimplifier rewriting lineitem
StoredWithSimplifier rewriting by_quantity_obl
StoredWithSimplifier rewriting sorted
StoredWithSimplifier rewriting sorted_open
EliminateSorts rewriting lineitem0
EliminateSorts rewriting by_quantity_0
EliminateSorts rewriting by_quantity_0_close
EliminateSorts rewriting lineitem1
EliminateSorts rewriting by_quantity_1
EliminateSorts rewriting by_quantity_1_close
EliminateSorts rewriting lineitem
EliminateSorts rewriting by_quantity_obl
EliminateSorts rewriting sorted
EliminateSorts rewriting sorted_open
##################
CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}

##################
python {1} CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}

python {2} CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}

obliv-c {1, 2} CREATE RELATION by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}
MPCPushDown rewriting lineitem0
MPCPushDown rewriting lineitem1
MPCPushDown rewriting lineitem
MPCPushDown rewriting by_quantity
MPCPushDown rewriting sorted
UpdateColumns rewriting lineitem0
UpdateColumns rewriting by_quantity_0
UpdateColumns rewriting lineitem1
UpdateColumns rewriting by_quantity_1
UpdateColumns rewriting lineitem
UpdateColumns rewriting by_quantity_obl
UpdateColumns rewriting sorted
MPCPushUp rewriting sorted
MPCPushUp rewriting by_quantity_obl
MPCPushUp rewriting lineitem
MPCPushUp rewriting by_quantity_1
MPCPushUp rewriting lineitem1
MPCPushUp rewriting by_quantity_0
MPCPushUp rewriting lineitem0
TrustSetPropDown rewriting lineitem0
TrustSetPropDown rewriting by_quantity_0
TrustSetPropDown rewriting lineitem1
TrustSetPropDown rewriting by_quantity_1
TrustSetPropDown rewriting lineitem
TrustSetPropDown rewriting by_quantity_obl
TrustSetPropDown rewriting sorted
HybridOperatorOpt rewriting lineitem0
HybridOperatorOpt rewriting by_quantity_0
HybridOperatorOpt rewriting lineitem1
HybridOperatorOpt rewriting by_quantity_1
HybridOperatorOpt rewriting lineitem
HybridOperatorOpt rewriting by_quantity_obl
HybridOperatorOpt rewriting sorted
InsertOpenAndCloseOps rewriting lineitem0
InsertOpenAndCloseOps rewriting by_quantity_0
False
{<conclave.dag.Concat object at 0x7f9f320f9290>}
InsertOpenAndCloseOps rewriting lineitem1
InsertOpenAndCloseOps rewriting by_quantity_1
False
{<conclave.dag.Concat object at 0x7f9f320f9290>}
InsertOpenAndCloseOps rewriting lineitem
InsertOpenAndCloseOps rewriting by_quantity_obl
True
{<conclave.dag.SortBy object at 0x7f9f320b3190>}
InsertOpenAndCloseOps rewriting sorted
True
set()
ExpandCompositeOps rewriting lineitem0
ExpandCompositeOps rewriting by_quantity_0
ExpandCompositeOps rewriting by_quantity_0_close
ExpandCompositeOps rewriting lineitem1
ExpandCompositeOps rewriting by_quantity_1
ExpandCompositeOps rewriting by_quantity_1_close
ExpandCompositeOps rewriting lineitem
ExpandCompositeOps rewriting by_quantity_obl
ExpandCompositeOps rewriting sorted
ExpandCompositeOps rewriting sorted_open
StoredWithSimplifier rewriting lineitem0
StoredWithSimplifier rewriting by_quantity_0
StoredWithSimplifier rewriting by_quantity_0_close
StoredWithSimplifier rewriting lineitem1
StoredWithSimplifier rewriting by_quantity_1
StoredWithSimplifier rewriting by_quantity_1_close
StoredWithSimplifier rewriting lineitem
StoredWithSimplifier rewriting by_quantity_obl
StoredWithSimplifier rewriting sorted
StoredWithSimplifier rewriting sorted_open
EliminateSorts rewriting lineitem0
EliminateSorts rewriting by_quantity_0
EliminateSorts rewriting by_quantity_0_close
EliminateSorts rewriting lineitem1
EliminateSorts rewriting by_quantity_1
EliminateSorts rewriting by_quantity_1_close
EliminateSorts rewriting lineitem
EliminateSorts rewriting by_quantity_obl
EliminateSorts rewriting sorted
EliminateSorts rewriting sorted_open
##################
CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}

##################
python {1} CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}

python {2} CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}

obliv-c {1, 2} CREATE RELATION by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}
start python
Will write to /home/cc/conclave/demo/tpch_one/100MB/by_quantity_0.csv
done python
start python
Will write to /home/cc/conclave/demo/tpch_two/100MB/by_quantity_1.csv
done python
Connecting to localhost on port 1234 ...
Connecting to localhost on port 1234 ...

0 python
1 python
2 obliv-c
Will connect to 1 at 0.0.0.0:9001
Missing Jiff config 

Skipping other party's job:  <conclave.job.PythonJob object at 0x7f9f32118b50>
example-python-job-1: /home/cc/conclave/demo/tpch_two/100MB/example-python-job-1/workflow.py running
Dispatching as Evaluator.

done msg received DoneMsg(1)
Obliv-C DoneMsg received.

***

Writing header file here /home/cc/conclave/demo/tpch_two/100MB/example-oblivc-job-2

***
example-oblivc-job-2: /home/cc/conclave/demo/tpch_two/100MB/example-oblivc-job-2/bash.sh dispatching Obliv-C job. 

0 python
1 python
2 obliv-c
Will wait for 2 to connect
iam msg received IAMMsg(2)
Missing Jiff config 

example-python-job-0: /home/cc/conclave/demo/tpch_one/100MB/example-python-job-0/workflow.py running
Skipping other party's job:  <conclave.job.PythonJob object at 0x7f9f320bb550>
Dispatching as Garbler.

***

Writing header file here /home/cc/conclave/demo/tpch_one/100MB/example-oblivc-job-2

***
example-oblivc-job-2: /home/cc/conclave/demo/tpch_one/100MB/example-oblivc-job-2/bash.sh dispatching Obliv-C job. 
took 19.44080986501649 seconds to run MPC
{'backends': {'oblivc': {'party_count': '2', 'ip_port': 'localhost:1234', 'available': 1, 'oc_path': '/home/cc/obliv-c/bin/oblivcc'}}, 'user_config': {'workflow_name': 'example', 'leaky_ops': 0, 'pid': 1, 'all_pids': [1, 2], 'use_floats': 0, 'paths': {'input_path': '/home/cc/conclave/demo/tpch_one/100MB'}}, 'net': {'parties': [{'port': 9001, 'host': '0.0.0.0'}, {'port': 9002, 'host': '0.0.0.0'}]}}
MPCPushDown rewriting lineitem0
MPCPushDown rewriting lineitem1
MPCPushDown rewriting lineitem
MPCPushDown rewriting by_quantity
MPCPushDown rewriting sorted
UpdateColumns rewriting lineitem0
UpdateColumns rewriting by_quantity_0
UpdateColumns rewriting lineitem1
UpdateColumns rewriting by_quantity_1
UpdateColumns rewriting lineitem
UpdateColumns rewriting by_quantity_obl
UpdateColumns rewriting sorted
MPCPushUp rewriting sorted
MPCPushUp rewriting by_quantity_obl
MPCPushUp rewriting lineitem
MPCPushUp rewriting by_quantity_1
MPCPushUp rewriting lineitem1
MPCPushUp rewriting by_quantity_0
MPCPushUp rewriting lineitem0
TrustSetPropDown rewriting lineitem0
TrustSetPropDown rewriting by_quantity_0
TrustSetPropDown rewriting lineitem1
TrustSetPropDown rewriting by_quantity_1
TrustSetPropDown rewriting lineitem
TrustSetPropDown rewriting by_quantity_obl
TrustSetPropDown rewriting sorted
HybridOperatorOpt rewriting lineitem0
HybridOperatorOpt rewriting by_quantity_0
HybridOperatorOpt rewriting lineitem1
HybridOperatorOpt rewriting by_quantity_1
HybridOperatorOpt rewriting lineitem
HybridOperatorOpt rewriting by_quantity_obl
HybridOperatorOpt rewriting sorted
InsertOpenAndCloseOps rewriting lineitem0
InsertOpenAndCloseOps rewriting by_quantity_0
False
{<conclave.dag.Concat object at 0x7f9f32118210>}
InsertOpenAndCloseOps rewriting lineitem1
InsertOpenAndCloseOps rewriting by_quantity_1
False
{<conclave.dag.Concat object at 0x7f9f32118210>}
InsertOpenAndCloseOps rewriting lineitem
InsertOpenAndCloseOps rewriting by_quantity_obl
True
{<conclave.dag.SortBy object at 0x7f9f321186d0>}
InsertOpenAndCloseOps rewriting sorted
True
set()
ExpandCompositeOps rewriting lineitem0
ExpandCompositeOps rewriting by_quantity_0
ExpandCompositeOps rewriting by_quantity_0_close
ExpandCompositeOps rewriting lineitem1
ExpandCompositeOps rewriting by_quantity_1
ExpandCompositeOps rewriting by_quantity_1_close
ExpandCompositeOps rewriting lineitem
ExpandCompositeOps rewriting by_quantity_obl
ExpandCompositeOps rewriting sorted
ExpandCompositeOps rewriting sorted_open
StoredWithSimplifier rewriting lineitem0
StoredWithSimplifier rewriting by_quantity_0
StoredWithSimplifier rewriting by_quantity_0_close
StoredWithSimplifier rewriting lineitem1
StoredWithSimplifier rewriting by_quantity_1
StoredWithSimplifier rewriting by_quantity_1_close
StoredWithSimplifier rewriting lineitem
StoredWithSimplifier rewriting by_quantity_obl
StoredWithSimplifier rewriting sorted
StoredWithSimplifier rewriting sorted_open
EliminateSorts rewriting lineitem0
EliminateSorts rewriting by_quantity_0
EliminateSorts rewriting by_quantity_0_close
EliminateSorts rewriting lineitem1
EliminateSorts rewriting by_quantity_1
EliminateSorts rewriting by_quantity_1_close
EliminateSorts rewriting lineitem
EliminateSorts rewriting by_quantity_obl
EliminateSorts rewriting sorted
EliminateSorts rewriting sorted_open
##################
CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}

##################
python {1} CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}

python {2} CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}

obliv-c {1, 2} CREATE RELATION by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}
MPCPushDown rewriting lineitem0
MPCPushDown rewriting lineitem1
MPCPushDown rewriting lineitem
MPCPushDown rewriting by_quantity
MPCPushDown rewriting sorted
UpdateColumns rewriting lineitem0
UpdateColumns rewriting by_quantity_0
UpdateColumns rewriting lineitem1
UpdateColumns rewriting by_quantity_1
UpdateColumns rewriting lineitem
UpdateColumns rewriting by_quantity_obl
UpdateColumns rewriting sorted
MPCPushUp rewriting sorted
MPCPushUp rewriting by_quantity_obl
MPCPushUp rewriting lineitem
MPCPushUp rewriting by_quantity_1
MPCPushUp rewriting lineitem1
MPCPushUp rewriting by_quantity_0
MPCPushUp rewriting lineitem0
TrustSetPropDown rewriting lineitem0
TrustSetPropDown rewriting by_quantity_0
TrustSetPropDown rewriting lineitem1
TrustSetPropDown rewriting by_quantity_1
TrustSetPropDown rewriting lineitem
TrustSetPropDown rewriting by_quantity_obl
TrustSetPropDown rewriting sorted
HybridOperatorOpt rewriting lineitem0
HybridOperatorOpt rewriting by_quantity_0
HybridOperatorOpt rewriting lineitem1
HybridOperatorOpt rewriting by_quantity_1
HybridOperatorOpt rewriting lineitem
HybridOperatorOpt rewriting by_quantity_obl
HybridOperatorOpt rewriting sorted
InsertOpenAndCloseOps rewriting lineitem0
InsertOpenAndCloseOps rewriting by_quantity_0
False
{<conclave.dag.Concat object at 0x7f9f321187d0>}
InsertOpenAndCloseOps rewriting lineitem1
InsertOpenAndCloseOps rewriting by_quantity_1
False
{<conclave.dag.Concat object at 0x7f9f321187d0>}
InsertOpenAndCloseOps rewriting lineitem
InsertOpenAndCloseOps rewriting by_quantity_obl
True
{<conclave.dag.SortBy object at 0x7f9f320c25d0>}
InsertOpenAndCloseOps rewriting sorted
True
set()
ExpandCompositeOps rewriting lineitem0
ExpandCompositeOps rewriting by_quantity_0
ExpandCompositeOps rewriting by_quantity_0_close
ExpandCompositeOps rewriting lineitem1
ExpandCompositeOps rewriting by_quantity_1
ExpandCompositeOps rewriting by_quantity_1_close
ExpandCompositeOps rewriting lineitem
ExpandCompositeOps rewriting by_quantity_obl
ExpandCompositeOps rewriting sorted
ExpandCompositeOps rewriting sorted_open
StoredWithSimplifier rewriting lineitem0
StoredWithSimplifier rewriting by_quantity_0
StoredWithSimplifier rewriting by_quantity_0_close
StoredWithSimplifier rewriting lineitem1
StoredWithSimplifier rewriting by_quantity_1
StoredWithSimplifier rewriting by_quantity_1_close
StoredWithSimplifier rewriting lineitem
StoredWithSimplifier rewriting by_quantity_obl
StoredWithSimplifier rewriting sorted
StoredWithSimplifier rewriting sorted_open
EliminateSorts rewriting lineitem0
EliminateSorts rewriting by_quantity_0
EliminateSorts rewriting by_quantity_0_close
EliminateSorts rewriting lineitem1
EliminateSorts rewriting by_quantity_1
EliminateSorts rewriting by_quantity_1_close
EliminateSorts rewriting lineitem
EliminateSorts rewriting by_quantity_obl
EliminateSorts rewriting sorted
EliminateSorts rewriting sorted_open
##################
CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}

##################
python {1} CREATE RELATION lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem0([l_orderkey {1}, l_partkey {1}, l_suppkey {1}, l_linenumber {1}, l_quantity {1}, l_extendedprice {1}, l_discount {1}, l_tax {1}, l_returnflag {1}, l_linestatus {1}, l_shipdate {1}, l_commitdate {1}, l_receiptdate {1}, l_shipinstruct {1}, l_shipmode {1}, l_comment {1}]) {1}) GROUP BY [l_quantity] AS by_quantity_0([l_quantity {1}, by_quantity {1}]) {1}

python {2} CREATE RELATION lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2} WITH COLUMNS (INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER)
AGG [, count] FROM (lineitem1([l_orderkey {2}, l_partkey {2}, l_suppkey {2}, l_linenumber {2}, l_quantity {2}, l_extendedprice {2}, l_discount {2}, l_tax {2}, l_returnflag {2}, l_linestatus {2}, l_shipdate {2}, l_commitdate {2}, l_receiptdate {2}, l_shipinstruct {2}, l_shipmode {2}, l_comment {2}]) {2}) GROUP BY [l_quantity] AS by_quantity_1([l_quantity {2}, by_quantity {2}]) {2}

obliv-c {1, 2} CREATE RELATION by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_0([l_quantity {1}, by_quantity {1}]) {1} INTO by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}
CREATE RELATION by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} WITH COLUMNS (INTEGER, INTEGER)
CLOSEMPC by_quantity_1([l_quantity {2}, by_quantity {2}]) {2} INTO by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}
CONCATMPC [by_quantity_0_close([l_quantity {1}, by_quantity {1}]) {1, 2}, by_quantity_1_close([l_quantity {2}, by_quantity {2}]) {1, 2}] AS lineitem([l_quantity {}, by_quantity {}]) {1, 2}
AGGMPC [by_quantity, sum] FROM (lineitem([l_quantity {}, by_quantity {}]) {1, 2}) GROUP BY [l_quantity] AS by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}
SORTBYMPC l_quantity FROM (by_quantity_obl([l_quantity {}, by_quantity {}]) {1, 2}) AS sorted([l_quantity {}, by_quantity {}]) {1, 2}
OPENMPC sorted([l_quantity {}, by_quantity {}]) {1, 2} INTO sorted_open([l_quantity {}, by_quantity {}]) {1}
start python
Will write to /home/cc/conclave/demo/tpch_two/100MB/by_quantity_1.csv
done python
start python
Will write to /home/cc/conclave/demo/tpch_one/100MB/by_quantity_0.csv
done python
Connecting to localhost on port 1234 ...
Connecting to localhost on port 1234 ...

0 python
1 python
2 obliv-c
Will connect to 1 at 0.0.0.0:9001
Missing Jiff config 

Skipping other party's job:  <conclave.job.PythonJob object at 0x7f9f32118bd0>
example-python-job-1: /home/cc/conclave/demo/tpch_two/100MB/example-python-job-1/workflow.py running
Dispatching as Evaluator.

done msg received DoneMsg(1)
Obliv-C DoneMsg received.

***

Writing header file here /home/cc/conclave/demo/tpch_two/100MB/example-oblivc-job-2

***
example-oblivc-job-2: /home/cc/conclave/demo/tpch_two/100MB/example-oblivc-job-2/bash.sh dispatching Obliv-C job. 

0 python
1 python
2 obliv-c
Will wait for 2 to connect
iam msg received IAMMsg(2)
Missing Jiff config 

example-python-job-0: /home/cc/conclave/demo/tpch_one/100MB/example-python-job-0/workflow.py running
Skipping other party's job:  <conclave.job.PythonJob object at 0x7f9f320af550>
Dispatching as Garbler.

***

Writing header file here /home/cc/conclave/demo/tpch_one/100MB/example-oblivc-job-2

***
example-oblivc-job-2: /home/cc/conclave/demo/tpch_one/100MB/example-oblivc-job-2/bash.sh dispatching Obliv-C job. 
took 19.481742964009754 seconds to run MPC
